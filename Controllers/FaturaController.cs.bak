using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using MuhasebeStokWebApp.Data;
using MuhasebeStokWebApp.Data.Entities;
using MuhasebeStokWebApp.Data.Repositories;
using MuhasebeStokWebApp.Models;
using MuhasebeStokWebApp.ViewModels.Fatura;
using MuhasebeStokWebApp.ViewModels.Kullanici;
using System.Security.Claims;
using System.Text.Json;
using System.Text.Json.Serialization;
using MuhasebeStokWebApp.ViewModels.Irsaliye;

namespace MuhasebeStokWebApp.Controllers
{
    // [Authorize]
    public class FaturaController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly ApplicationDbContext _context;

        public FaturaController(IUnitOfWork unitOfWork, ApplicationDbContext context)
        {
            _unitOfWork = unitOfWork;
            _context = context;
        }

        // GET: Fatura
        public async Task<IActionResult> Index(string sortOrder, string currentFilter, string searchString, int? pageNumber)
        {
            ViewData["CurrentSort"] = sortOrder;
            ViewData["NumaraSortParm"] = String.IsNullOrEmpty(sortOrder) ? "numara_desc" : "";
            ViewData["TarihSortParm"] = sortOrder == "Tarih" ? "tarih_desc" : "Tarih";
            ViewData["CariSortParm"] = sortOrder == "Cari" ? "cari_desc" : "Cari";
            ViewData["TutarSortParm"] = sortOrder == "Tutar" ? "tutar_desc" : "Tutar";
            ViewData["DurumSortParm"] = sortOrder == "Durum" ? "durum_desc" : "Durum";

            if (searchString != null)
            {
                pageNumber = 1;
            }
            else
            {
                searchString = currentFilter;
            }

            ViewData["CurrentFilter"] = searchString;

            var faturalar = _context.Faturalar
                .Include(f => f.Cari)
                .Where(f => !f.SoftDelete)
                .AsQueryable();

            if (!String.IsNullOrEmpty(searchString))
            {
                faturalar = faturalar.Where(f => 
                    f.FaturaNumarasi.Contains(searchString) ||
                    f.Cari.CariAdi.Contains(searchString) ||
                    f.OdemeDurumu.Contains(searchString)
                );
            }

            switch (sortOrder)
            {
                case "numara_desc":
                    faturalar = faturalar.OrderByDescending(f => f.FaturaNumarasi);
                    break;
                case "Tarih":
                    faturalar = faturalar.OrderBy(f => f.FaturaTarihi);
                    break;
                case "tarih_desc":
                    faturalar = faturalar.OrderByDescending(f => f.FaturaTarihi);
                    break;
                case "Cari":
                    faturalar = faturalar.OrderBy(f => f.Cari.CariAdi);
                    break;
                case "cari_desc":
                    faturalar = faturalar.OrderByDescending(f => f.Cari.CariAdi);
                    break;
                case "Tutar":
                    faturalar = faturalar.OrderBy(f => f.GenelToplam);
                    break;
                case "tutar_desc":
                    faturalar = faturalar.OrderByDescending(f => f.GenelToplam);
                    break;
                case "Durum":
                    faturalar = faturalar.OrderBy(f => f.OdemeDurumu);
                    break;
                case "durum_desc":
                    faturalar = faturalar.OrderByDescending(f => f.OdemeDurumu);
                    break;
                default:
                    faturalar = faturalar.OrderBy(f => f.FaturaNumarasi);
                    break;
            }

            int pageSize = 10;
            var result = await PaginatedList<Fatura>.CreateAsync(faturalar.AsNoTracking(), pageNumber ?? 1, pageSize);

            var viewModel = result.Select(f => new FaturaViewModel
            {
                FaturaID = f.FaturaID,
                FaturaNumarasi = f.FaturaNumarasi,
                FaturaTarihi = f.FaturaTarihi,
                VadeTarihi = f.VadeTarihi,
                CariAdi = f.Cari?.CariAdi ?? "Belirtilmemiş",
                FaturaTuru = f.FaturaTuruID.HasValue ? _context.FaturaTurleri.FirstOrDefault(ft => ft.FaturaTuruID == f.FaturaTuruID)?.FaturaTuruAdi : "Belirtilmemiş",
                AraToplam = f.AraToplam ?? 0,
                KdvTutari = f.KDVToplam ?? 0,
                GenelToplam = f.GenelToplam ?? 0,
                OdemeDurumu = f.OdemeDurumu,
                Aciklama = f.FaturaNotu,
                OlusturmaTarihi = f.OlusturmaTarihi ?? DateTime.Now
            }).ToList();

            var paginatedViewModel = new PaginatedList<FaturaViewModel>(viewModel, result.TotalItems, result.PageIndex, result.TotalPages);

            return View(paginatedViewModel);
        }

        // GET: Fatura/Details/5
        public async Task<IActionResult> Details(Guid? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var fatura = await _context.Faturalar
                    .Include(f => f.Cari)
                .Include(f => f.FaturaDetaylari)
                .ThenInclude(fd => fd.Urun)
                .Include(f => f.FaturaOdemeleri)
                .FirstOrDefaultAsync(f => f.FaturaID == id && !f.SoftDelete);

            if (fatura == null)
            {
                return NotFound();
            }

            // Toplam ödeme tutarını hesapla
            decimal toplamOdeme = fatura.FaturaOdemeleri?.Sum(o => o.OdemeTutari) ?? 0;
            decimal kalanTutar = (fatura.GenelToplam ?? 0) - toplamOdeme;
            decimal odenenTutar = toplamOdeme;

            // Sistem ayarlarını al
            var sistemAyarlari = await _context.SistemAyarlari.FirstOrDefaultAsync();
            
            // Fatura view model'e sistem ayarlarını aktarıyoruz
            var viewModel = new FaturaDetailViewModel
            {
                FaturaID = fatura.FaturaID,
                FaturaNumarasi = fatura.FaturaNumarasi,
                SiparisNumarasi = fatura.SiparisNumarasi ?? "",
                FaturaTarihi = fatura.FaturaTarihi,
                VadeTarihi = fatura.VadeTarihi,
                CariID = fatura.CariID ?? Guid.Empty,
                CariAdi = fatura.Cari?.CariAdi ?? "Belirtilmemiş",
                CariVergiNo = fatura.Cari?.VergiNo ?? "Belirtilmemiş",
                CariAdres = fatura.Cari?.Adres ?? "Belirtilmemiş",
                CariTelefon = fatura.Cari?.Telefon ?? "Belirtilmemiş",
                FaturaTuru = fatura.FaturaTuru?.FaturaTuruAdi ?? "Belirtilmemiş",
                AraToplam = fatura.AraToplam ?? 0,
                KdvTutari = fatura.KDVToplam ?? 0,
                KdvToplam = fatura.KDVToplam ?? 0,
                GenelToplam = fatura.GenelToplam ?? 0,
                OdemeDurumu = fatura.OdemeDurumu ?? "Belirtilmemiş",
                Aciklama = fatura.FaturaNotu ?? "",
                DovizTuru = fatura.DovizTuru ?? "TRY",
                DovizKuru = fatura.DovizKuru ?? 1,
                OlusturmaTarihi = fatura.OlusturmaTarihi,
                GuncellemeTarihi = fatura.GuncellemeTarihi,
                OdenecekTutar = kalanTutar,
                OdenenTutar = odenenTutar,
                KalanTutar = kalanTutar,
                FaturaKalemleri = fatura.FaturaDetaylari.Select(fd => new FaturaKalemDetailViewModel
                {
                    KalemID = fd.FaturaDetayID,
                    UrunID = fd.UrunID,
                    UrunAdi = fd.Urun?.UrunAdi ?? "Belirtilmemiş",
                    Miktar = fd.Miktar,
                    BirimFiyat = fd.BirimFiyat,
                    KdvOrani = (int)fd.KdvOrani,
                    IndirimOrani = (int)fd.IndirimOrani,
                    Tutar = fd.SatirToplam ?? 0,
                    KdvTutari = fd.KdvTutari ?? 0,
                    IndirimTutari = fd.IndirimTutari ?? 0,
                    NetTutar = fd.NetTutar ?? 0,
                    Birim = fd.Birim
                }).ToList(),
                Odemeler = fatura.FaturaOdemeleri.Select(o => new OdemeViewModel
                {
                    OdemeID = o.OdemeID,
                    OdemeTuru = o.OdemeTuru,
                    OdemeTutari = o.OdemeTutari,
                    OdemeTarihi = o.OdemeTarihi,
                    Aciklama = o.Aciklama
                }).ToList()
            };

            // Ödeme türlerini ViewBag'e ekle
            ViewBag.OdemeTurleri = new SelectList(_context.OdemeTurleri, "OdemeTuruID", "OdemeTuruAdi");
            
            // Kasa listesini ViewBag'e ekle
            ViewBag.Kasalar = new SelectList(_context.Kasalar.Where(k => !k.SoftDelete), "KasaID", "KasaAdi");
            
            // Banka listesini ViewBag'e ekle
            ViewBag.Bankalar = new SelectList(_context.Bankalar.Where(b => !b.SoftDelete), "BankaID", "BankaAdi");

            return View(viewModel);
        }

        // GET: Fatura/Create
        public IActionResult Create()
        {
            var viewModel = new FaturaCreateViewModel
            {
                FaturaTarihi = DateTime.Today,
                VadeTarihi = DateTime.Today.AddDays(30),
                FaturaNumarasi = GenerateNewFaturaNumber(),
                SiparisNumarasi = GenerateSiparisNumarasi()
            };

            ViewBag.Cariler = new SelectList(_context.Cariler.Where(c => !c.SoftDelete && c.Aktif), "CariID", "CariAdi");
            ViewBag.FaturaTurleri = new SelectList(_context.FaturaTurleri, "FaturaTuruID", "FaturaTuruAdi");
            ViewBag.OdemeTurleri = new SelectList(_context.OdemeTurleri, "OdemeTuruID", "OdemeTuruAdi");
            ViewBag.Urunler = new SelectList(_context.Urunler.Where(u => !u.SoftDelete && u.Aktif), "UrunID", "UrunAdi");

            return View(viewModel);
        }

        // Yeni fatura numarası oluşturma
        private string GenerateNewFaturaNumber()
        {
            try
            {
                // Tarih formatını oluştur: YYMMDD
                string tarihFormat = DateTime.Now.ToString("yyMMdd");
                
                // Bugün oluşturulan son fatura numarasını al
                var bugunOlusturulanFaturalar = _context.Faturalar
                    .Where(f => f.FaturaNumarasi != null && f.FaturaNumarasi.StartsWith($"FTR-{tarihFormat.Substring(0, 4)}"))
                    .OrderByDescending(f => f.FaturaNumarasi)
                    .ToList();
                
                int siraNo = 1;
                
                if (bugunOlusturulanFaturalar.Any())
                {
                    // Son fatura numarasından sıra numarasını çıkar
                    string sonNumara = bugunOlusturulanFaturalar.First().FaturaNumarasi;
                    
                    // FTR-YYMMDD-XXX formatından XXX kısmını al
                    if (sonNumara.Length > 12 && int.TryParse(sonNumara.Substring(sonNumara.LastIndexOf('-') + 1), out int sonSiraNo))
                    {
                        siraNo = sonSiraNo + 1;
                    }
                }
                
                // Yeni fatura numarası oluştur: FTR-YYMMDD-XXX
                string yeniNumara = $"FTR-{tarihFormat}-{siraNo:D3}";
                
                return yeniNumara;
            }
            catch (Exception)
            {
                // Hata durumunda varsayılan bir numara döndür
                return $"FTR-{DateTime.Now.ToString("yyMMdd")}-001";
            }
        }

        // Yeni sipariş numarası oluşturma
        private string GenerateSiparisNumarasi()
        {
            try
            {
                // Tarih formatını oluştur: YYMMDD
                string tarihFormat = DateTime.Now.ToString("yyMMdd");
                
                // Bugün oluşturulan son sipariş numarasını al
                var bugunOlusturulanSiparisler = _context.Faturalar
                    .Where(f => f.SiparisNumarasi != null && f.SiparisNumarasi.StartsWith($"SIP-{tarihFormat.Substring(0, 4)}"))
                    .OrderByDescending(f => f.SiparisNumarasi)
                    .ToList();
                
                int siraNo = 1;
                
                if (bugunOlusturulanSiparisler.Any())
                {
                    // Son sipariş numarasından sıra numarasını çıkar
                    string sonNumara = bugunOlusturulanSiparisler.First().SiparisNumarasi;
                    
                    // SIP-YYMMDD-XXX formatından XXX kısmını al
                    if (sonNumara.Length > 12 && int.TryParse(sonNumara.Substring(sonNumara.LastIndexOf('-') + 1), out int sonSiraNo))
                    {
                        siraNo = sonSiraNo + 1;
                    }
                }
                
                // Yeni sipariş numarası oluştur: SIP-YYMMDD-XXX
                string yeniNumara = $"SIP-{tarihFormat}-{siraNo:D3}";
                
                return yeniNumara;
            }
            catch (Exception)
            {
                // Hata durumunda varsayılan bir numara döndür
                return $"SIP-{DateTime.Now.ToString("yyMMdd")}-001";
            }
        }

        // POST: Fatura/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(FaturaCreateViewModel viewModel)
        {
            Console.WriteLine("Fatura Create POST metodu çağrıldı");
            Console.WriteLine($"Model geçerli mi: {ModelState.IsValid}");
            Console.WriteLine($"Fatura Numarası: {viewModel.FaturaNumarasi}");
            Console.WriteLine($"Cari ID: {viewModel.CariID}");
            Console.WriteLine($"Fatura Türü: {viewModel.FaturaTuruID}");
            Console.WriteLine($"Fatura Kalemleri Sayısı: {viewModel.FaturaKalemleri?.Count ?? 0}");
            
            // ViewBag değerlerini yeniden yükle (post başarısız olursa görünüm doğru verilerle yüklensin)
            ViewBag.Cariler = new SelectList(await _context.Cariler.Where(c => !c.SoftDelete && c.Aktif).ToListAsync(), "CariID", "CariAdi");
            ViewBag.FaturaTurleri = new SelectList(await _context.FaturaTurleri.ToListAsync(), "FaturaTuruID", "FaturaTuruAdi");
            ViewBag.Urunler = new SelectList(await _context.Urunler.Where(u => !u.SoftDelete && u.Aktif).ToListAsync(), "UrunID", "UrunAdi");
            
            // Dropdown listeleriyle ilgili model hatalarını temizle
            ModelState.Remove("CariListesi");
            ModelState.Remove("FaturaTuruListesi");
            ModelState.Remove("DovizListesi");
            
            if (viewModel.FaturaKalemleri != null)
            {
                foreach (var kalem in viewModel.FaturaKalemleri)
                {
                    Console.WriteLine($"Kalem - Ürün ID: {kalem.UrunID}, Miktar: {kalem.Miktar}, Birim Fiyat: {kalem.BirimFiyat}");
                }
            }
            else
            {
                ModelState.AddModelError("", "Fatura kalemleri bulunamadı. En az bir ürün eklemelisiniz.");
                return View(viewModel);
            }
            
            // Fatura kalemleri boşsa hata mesajı göster
            if (viewModel.FaturaKalemleri.Count == 0)
            {
                ModelState.AddModelError("", "En az bir fatura kalemi eklemelisiniz.");
                return View(viewModel);
            }
            
            if (!ModelState.IsValid)
            {
                // Hata mesajlarını görünüme gönder
                var errorMessages = string.Join("; ", ModelState.Values
                    .SelectMany(x => x.Errors)
                    .Select(x => x.ErrorMessage));
                
                ModelState.AddModelError("", $"Formda hatalar var: {errorMessages}");
                
                return View(viewModel);
            }
            
            try
            {
                // Toplam değerleri hesapla
                decimal araToplam = 0;
                decimal kdvTutari = 0;
                decimal genelToplam = 0;

                foreach (var kalem in viewModel.FaturaKalemleri)
                {
                    araToplam += kalem.Tutar;
                    kdvTutari += kalem.KdvTutari;
                    genelToplam += kalem.NetTutar;
                }

                    var fatura = new Fatura
                    {
                        FaturaID = Guid.NewGuid(),
                        FaturaNumarasi = viewModel.FaturaNumarasi,
                        FaturaTarihi = viewModel.FaturaTarihi,
                        VadeTarihi = viewModel.VadeTarihi,
                        CariID = viewModel.CariID,
                    FaturaTuruID = viewModel.FaturaTuruID,
                    AraToplam = araToplam,
                    KDVToplam = kdvTutari,
                    GenelToplam = genelToplam,
                        OdemeDurumu = viewModel.OdemeDurumu,
                    FaturaNotu = viewModel.Aciklama,
                    Resmi = viewModel.Resmi,
                        OlusturmaTarihi = DateTime.Now,
                    SoftDelete = false,
                    Aktif = true,
                    DovizTuru = viewModel.DovizTuru ?? "TRY",
                    DovizKuru = viewModel.DovizKuru ?? 1,
                    SiparisNumarasi = viewModel.SiparisNumarasi
                };

                _context.Faturalar.Add(fatura);

                if (viewModel.FaturaKalemleri != null && viewModel.FaturaKalemleri.Any())
                {
                    foreach (var kalem in viewModel.FaturaKalemleri)
                    {
                        // SatirKdvToplam değeri için KdvTutari değerini kullanıyoruz
                        var satirKdvToplam = kalem.KdvTutari;
                        
                        var faturaDetay = new FaturaDetay
                        {
                            FaturaDetayID = Guid.NewGuid(),
                            FaturaID = fatura.FaturaID,
                            UrunID = kalem.UrunID,
                            Miktar = kalem.Miktar,
                            BirimFiyat = kalem.BirimFiyat,
                            KdvOrani = kalem.KdvOrani,
                            IndirimOrani = kalem.IndirimOrani,
                            SatirToplam = kalem.Tutar,
                            KdvTutari = kalem.KdvTutari,
                            IndirimTutari = kalem.IndirimTutari,
                            NetTutar = kalem.NetTutar,
                            Birim = kalem.Birim,
                            Aciklama = "",
                            OlusturmaTarihi = DateTime.Now,
                            SoftDelete = false,
                            SatirKdvToplam = satirKdvToplam // SatirKdvToplam alanına değer atıyoruz
                        };

                        _context.FaturaDetaylari.Add(faturaDetay);

                        // Stok hareketi oluştur
                        var faturaTuru = await _context.FaturaTurleri.FindAsync(viewModel.FaturaTuruID);
                        if (faturaTuru != null)
                    {
                        var stokHareket = new StokHareket
                        {
                            StokHareketID = Guid.NewGuid(),
                            UrunID = kalem.UrunID,
                                HareketTuru = faturaTuru.HareketTuru,
                                Miktar = faturaTuru.HareketTuru == "Giriş" ? kalem.Miktar : -kalem.Miktar,
                            BirimFiyat = kalem.BirimFiyat,
                                Tarih = DateTime.Now,
                                Aciklama = $"{viewModel.FaturaNumarasi} numaralı fatura",
                                ReferansNo = viewModel.FaturaNumarasi,
                                ReferansTuru = "Fatura",
                            ReferansID = fatura.FaturaID,
                                OlusturmaTarihi = DateTime.Now,
                                SoftDelete = false,
                                Birim = kalem.Birim
                            };

                            _context.StokHareketleri.Add(stokHareket);

                            // Ürün stok miktarını güncelle
                            var urun = await _context.Urunler.FindAsync(kalem.UrunID);
                            if (urun != null)
                            {
                                if (faturaTuru.HareketTuru == "Giriş")
                                {
                                    urun.StokMiktar += kalem.Miktar;
                                }
                                else
                                {
                                    urun.StokMiktar -= kalem.Miktar;
                                }
                                _context.Urunler.Update(urun);
                            }
                        }
                    }
                    }

                    // Cari hareket oluştur
                if (viewModel.CariID != Guid.Empty)
                {
                    var faturaTuru = await _context.FaturaTurleri.FindAsync(viewModel.FaturaTuruID);
                    string hareketTuru = "Borç"; // Varsayılan olarak borç

                    if (faturaTuru != null)
                    {
                        // Fatura türüne göre hareket türünü belirle
                        if (faturaTuru.FaturaTuruAdi.ToLower().Contains("satış") || 
                            faturaTuru.FaturaTuruAdi.ToLower().Contains("satis"))
                        {
                            hareketTuru = "Borç"; // Müşteri borçlanır
                        }
                        else if (faturaTuru.FaturaTuruAdi.ToLower().Contains("alış") || 
                                faturaTuru.FaturaTuruAdi.ToLower().Contains("alis"))
                        {
                            hareketTuru = "Alacak"; // Tedarikçiden alacaklanırız
                        }
                    }

                    var cariHareket = new CariHareket
                    {
                        CariHareketID = Guid.NewGuid(),
                        CariID = viewModel.CariID,
                        Tutar = genelToplam,
                        HareketTuru = hareketTuru,
                        Tarih = viewModel.FaturaTarihi,
                        ReferansNo = viewModel.FaturaNumarasi,
                        ReferansTuru = "Fatura",
                        ReferansID = fatura.FaturaID,
                        Aciklama = $"{viewModel.FaturaNumarasi} numaralı fatura",
                        OlusturmaTarihi = DateTime.Now,
                        SoftDelete = false
                    };

                    _context.CariHareketler.Add(cariHareket);
                }

                // İrsaliye ile ilişkilendirme
                if (TempData["IrsaliyeID"] != null)
                {
                    string irsaliyeIdStr = TempData["IrsaliyeID"].ToString();
                    if (Guid.TryParse(irsaliyeIdStr, out Guid irsaliyeId))
                    {
                        var irsaliye = await _context.Irsaliyeler.FindAsync(irsaliyeId);
                        if (irsaliye != null)
                        {
                            irsaliye.FaturaID = fatura.FaturaID;
                            irsaliye.Durum = "Kapalı"; // İrsaliye durumunu kapalı olarak güncelle
                            _context.Irsaliyeler.Update(irsaliye);
                        }
                    }
                }

                await _context.SaveChangesAsync();
                TempData["SuccessMessage"] = "Fatura başarıyla kaydedildi.";
                
                // Eğer otomatik olarak irsaliye oluşturulması isteniyorsa
                if (viewModel.OtomatikIrsaliyeOlustur)
                {
                    var createdFatura = await _context.Faturalar
                        .Include(f => f.Cari)
                        .Include(f => f.FaturaDetaylari)
                        .ThenInclude(fd => fd.Urun)
                        .FirstOrDefaultAsync(f => f.FaturaID == fatura.FaturaID);
                    
                    if (createdFatura != null)
                    {
                        // İrsaliye türünü belirle
                        string irsaliyeTuru = "Çıkış"; // Varsayılan olarak çıkış irsaliyesi
                        var faturaTuruForIrsaliye = await _context.FaturaTurleri.FindAsync(createdFatura.FaturaTuruID);
                        if (faturaTuruForIrsaliye != null)
                        {
                            if (faturaTuruForIrsaliye.FaturaTuruAdi.ToLower().Contains("alış") || faturaTuruForIrsaliye.FaturaTuruAdi.ToLower().Contains("alis"))
                            {
                                irsaliyeTuru = "Giriş"; // Alış faturası için giriş irsaliyesi
                            }
                        }
                        
                        // Irsaliye entity'sini oluştur
                        var irsaliye = new Irsaliye
                        {
                            IrsaliyeID = Guid.NewGuid(),
                            IrsaliyeNumarasi = $"IRS-{DateTime.Now.ToString("yyMMdd")}-{new Random().Next(1000, 9999)}",
                            IrsaliyeTarihi = DateTime.Today,
                            SevkTarihi = DateTime.Today,
                            CariID = createdFatura.CariID ?? Guid.Empty,
                            IrsaliyeTuru = irsaliyeTuru,
                            FaturaID = createdFatura.FaturaID,
                            Aciklama = $"{createdFatura.FaturaNumarasi} numaralı faturadan otomatik oluşturulmuştur.",
                            Durum = "Açık",
                            OlusturmaTarihi = DateTime.Now,
                            IrsaliyeDetaylari = new List<IrsaliyeDetay>()
                        };
                        
                        // Fatura kalemlerini irsaliye kalemlerine dönüştür
                        if (createdFatura.FaturaDetaylari != null && createdFatura.FaturaDetaylari.Any())
                        {
                            foreach (var fd in createdFatura.FaturaDetaylari)
                            {
                                if (fd.Urun != null)
                                {
                                    irsaliye.IrsaliyeDetaylari.Add(new IrsaliyeDetay
                                    {
                                        IrsaliyeDetayID = Guid.NewGuid(),
                                        IrsaliyeID = irsaliye.IrsaliyeID,
                                        UrunID = fd.UrunID,
                                        Miktar = fd.Miktar,
                                        Birim = !string.IsNullOrEmpty(fd.Birim) ? fd.Birim : "Adet",
                                        Aciklama = !string.IsNullOrEmpty(fd.Aciklama) ? fd.Aciklama : "Fatura kaynaklı",
                                        OlusturmaTarihi = DateTime.Now,
                                        SoftDelete = false
                                    });
                                }
                            }
                        }
                        
                        // Irsaliye ve detaylarını veritabanına kaydet
                        _context.Irsaliyeler.Add(irsaliye);
                        await _context.SaveChangesAsync();
                        
                        TempData["SuccessMessage"] += " İrsaliye otomatik olarak oluşturuldu.";
                    }
                }
                
                return RedirectToAction(nameof(Index));
                }
                catch (Exception ex)
                {
                // Hata mesajını logla
                Console.WriteLine($"Fatura kaydedilirken hata: {ex.Message}");
                Console.WriteLine($"Hata detayı: {ex.StackTrace}");
                
                if (ex.InnerException != null)
                {
                    Console.WriteLine($"İç hata: {ex.InnerException.Message}");
                }
                
                TempData["ErrorMessage"] = $"Fatura kaydedilirken bir hata oluştu: {ex.Message}";
                    ModelState.AddModelError("", $"Fatura kaydedilirken bir hata oluştu: {ex.Message}");
            }

            // Hata durumunda ViewBag'leri yeniden doldur
            ViewBag.Cariler = new SelectList(_context.Cariler.Where(c => !c.SoftDelete && c.Aktif), "CariID", "CariAdi", viewModel.CariID);
            ViewBag.FaturaTurleri = new SelectList(_context.FaturaTurleri, "FaturaTuruID", "FaturaTuruAdi", viewModel.FaturaTuruID);
            ViewBag.OdemeTurleri = new SelectList(_context.OdemeTurleri, "OdemeTuruID", "OdemeTuruAdi");
            ViewBag.Urunler = new SelectList(_context.Urunler.Where(u => !u.SoftDelete && u.Aktif), "UrunID", "UrunAdi");

            // Mevcut fatura kalemlerini koruyarak view'a geri dön
            return View(viewModel);
        }

        // GET: Fatura/Edit/5
        public async Task<IActionResult> Edit(Guid? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var fatura = await _context.Faturalar
                    .Include(f => f.Cari)
                .Include(f => f.FaturaDetaylari)
                .ThenInclude(fd => fd.Urun)
                .FirstOrDefaultAsync(f => f.FaturaID == id && !f.SoftDelete);

            if (fatura == null)
            {
                return NotFound();
            }

            var viewModel = new FaturaEditViewModel
            {
                FaturaID = fatura.FaturaID,
                FaturaNumarasi = fatura.FaturaNumarasi,
                SiparisNumarasi = fatura.SiparisNumarasi,
                FaturaTarihi = fatura.FaturaTarihi,
                VadeTarihi = fatura.VadeTarihi,
                CariID = fatura.CariID ?? Guid.Empty,
                FaturaTuruID = fatura.FaturaTuruID,
                Resmi = fatura.Resmi ?? true,
                Aciklama = fatura.FaturaNotu,
                OdemeDurumu = fatura.OdemeDurumu,
                DovizTuru = fatura.DovizTuru ?? "TRY",
                DovizKuru = fatura.DovizKuru ?? 1,
                FaturaKalemleri = fatura.FaturaDetaylari.Select(fd => new FaturaKalemViewModel
                {
                    KalemID = fd.FaturaDetayID,
                    UrunID = fd.UrunID,
                    UrunAdi = fd.Urun?.UrunAdi ?? "Belirtilmemiş",
                    Miktar = fd.Miktar,
                    BirimFiyat = fd.BirimFiyat,
                    KdvOrani = (int)fd.KdvOrani,
                    IndirimOrani = (int)fd.IndirimOrani,
                    Tutar = fd.SatirToplam ?? 0,
                    KdvTutari = fd.KdvTutari ?? 0,
                    IndirimTutari = fd.IndirimTutari ?? 0,
                    NetTutar = fd.NetTutar ?? 0
                }).ToList()
            };

            ViewBag.Cariler = new SelectList(_context.Cariler.Where(c => !c.SoftDelete && c.Aktif), "CariID", "CariAdi", viewModel.CariID);
            ViewBag.FaturaTurleri = new SelectList(_context.FaturaTurleri, "FaturaTuruID", "FaturaTuruAdi", viewModel.FaturaTuruID);
            ViewBag.OdemeTurleri = new SelectList(_context.OdemeTurleri, "OdemeTuruID", "OdemeTuruAdi");
            ViewBag.Urunler = new SelectList(_context.Urunler.Where(u => !u.SoftDelete && u.Aktif), "UrunID", "UrunAdi");

            return View(viewModel);
        }

        // POST: Fatura/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(Guid id, FaturaEditViewModel viewModel)
        {
            if (id != viewModel.FaturaID)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    var fatura = await _context.Faturalar
                        .Include(f => f.FaturaDetaylari)
                        .FirstOrDefaultAsync(f => f.FaturaID == id && !f.SoftDelete);

                    if (fatura == null)
                    {
                        return NotFound();
                    }

                    // Eski genel toplam değerini saklayalım
                    Guid? eskiCariID = fatura.CariID;

                    // Toplam değerleri hesapla
                    decimal araToplam = 0;
                    decimal kdvTutari = 0;
                    decimal genelToplam = 0;

                    foreach (var kalem in viewModel.FaturaKalemleri)
                    {
                        araToplam += kalem.Tutar;
                        kdvTutari += kalem.KdvTutari;
                        genelToplam += kalem.NetTutar;
                    }

                    fatura.FaturaNumarasi = viewModel.FaturaNumarasi;
                    fatura.SiparisNumarasi = viewModel.SiparisNumarasi;
                    fatura.FaturaTarihi = viewModel.FaturaTarihi;
                    fatura.VadeTarihi = viewModel.VadeTarihi;
                    fatura.CariID = viewModel.CariID;
                    fatura.FaturaTuruID = viewModel.FaturaTuruID;
                    fatura.AraToplam = araToplam;
                    fatura.KDVToplam = kdvTutari;
                    fatura.GenelToplam = genelToplam;
                    fatura.OdemeDurumu = viewModel.OdemeDurumu;
                    fatura.FaturaNotu = viewModel.Aciklama;
                    fatura.Resmi = viewModel.Resmi;
                    fatura.GuncellemeTarihi = DateTime.Now;

                    // Mevcut detayları silinmiş olarak işaretle
                    foreach (var detay in fatura.FaturaDetaylari)
                    {
                        detay.SoftDelete = true;
                    }

                    // Yeni detayları ekle
                    if (viewModel.FaturaKalemleri != null && viewModel.FaturaKalemleri.Any())
                    {
                        foreach (var kalem in viewModel.FaturaKalemleri)
                        {
                            // SatirKdvToplam değeri için KdvTutari değerini kullanıyoruz
                            var satirKdvToplam = kalem.KdvTutari;
                            
                            // Eğer mevcut bir kalem ise güncelle
                            if (kalem.KalemID != Guid.Empty)
                            {
                                var mevcutDetay = fatura.FaturaDetaylari.FirstOrDefault(d => d.FaturaDetayID == kalem.KalemID);
                                if (mevcutDetay != null)
                                {
                                    mevcutDetay.UrunID = kalem.UrunID;
                                    mevcutDetay.Miktar = kalem.Miktar;
                                    mevcutDetay.BirimFiyat = kalem.BirimFiyat;
                                    mevcutDetay.KdvOrani = kalem.KdvOrani;
                                    mevcutDetay.IndirimOrani = kalem.IndirimOrani;
                                    mevcutDetay.SatirToplam = kalem.Tutar;
                                    mevcutDetay.KdvTutari = kalem.KdvTutari;
                                    mevcutDetay.IndirimTutari = kalem.IndirimTutari;
                                    mevcutDetay.NetTutar = kalem.NetTutar;
                                    mevcutDetay.Birim = kalem.Birim;
                                    mevcutDetay.GuncellemeTarihi = DateTime.Now;
                                    mevcutDetay.SoftDelete = false;
                                    mevcutDetay.SatirKdvToplam = satirKdvToplam; // SatirKdvToplam alanını güncelliyoruz
                            }
                        }
                        else
                        {
                            // Yeni kalem ekle
                                var yeniDetay = new FaturaDetay
                            {
                                    FaturaDetayID = Guid.NewGuid(),
                                FaturaID = fatura.FaturaID,
                                    UrunID = kalem.UrunID,
                                    Miktar = kalem.Miktar,
                                    BirimFiyat = kalem.BirimFiyat,
                                    KdvOrani = kalem.KdvOrani,
                                    IndirimOrani = kalem.IndirimOrani,
                                    SatirToplam = kalem.Tutar,
                                    KdvTutari = kalem.KdvTutari,
                                    IndirimTutari = kalem.IndirimTutari,
                                    NetTutar = kalem.NetTutar,
                                    Birim = kalem.Birim,
                                    Aciklama = "",
                                    OlusturmaTarihi = DateTime.Now,
                                    SoftDelete = false,
                                    SatirKdvToplam = satirKdvToplam // SatirKdvToplam alanına değer atıyoruz
                                };

                                _context.FaturaDetaylari.Add(yeniDetay);
                            }
                        }
                    }

                    _context.Faturalar.Update(fatura);

                    // Cari hareket güncelleme
                    if (viewModel.CariID != Guid.Empty)
                    {
                        // Fatura ile ilişkili mevcut cari hareketi bul
                        var mevcutCariHareket = await _context.CariHareketler
                            .FirstOrDefaultAsync(ch => ch.ReferansID == fatura.FaturaID && ch.ReferansTuru == "Fatura" && !ch.SoftDelete);

                        var faturaTuru = await _context.FaturaTurleri.FindAsync(viewModel.FaturaTuruID);
                        string hareketTuru = "Borç"; // Varsayılan olarak borç

                        if (faturaTuru != null)
                        {
                            // Fatura türüne göre hareket türünü belirle
                            if (faturaTuru.FaturaTuruAdi.ToLower().Contains("satış") || 
                                faturaTuru.FaturaTuruAdi.ToLower().Contains("satis"))
                            {
                                hareketTuru = "Borç"; // Müşteri borçlanır
                            }
                            else if (faturaTuru.FaturaTuruAdi.ToLower().Contains("alış") || 
                                    faturaTuru.FaturaTuruAdi.ToLower().Contains("alis"))
                            {
                                hareketTuru = "Alacak"; // Tedarikçiden alacaklanırız
                            }
                        }

                        if (mevcutCariHareket != null)
                        {
                            // Cari değişmişse eski cari hareketini sil, yeni cari için hareket oluştur
                            if (eskiCariID != viewModel.CariID)
                            {
                                // Eski cari hareketi sil
                                mevcutCariHareket.SoftDelete = true;
                                mevcutCariHareket.GuncellemeTarihi = DateTime.Now;
                                _context.CariHareketler.Update(mevcutCariHareket);

                                // Yeni cari için hareket oluştur
                                var yeniCariHareket = new CariHareket
                                {
                                    CariHareketID = Guid.NewGuid(),
                                    CariID = viewModel.CariID,
                                    Tutar = genelToplam,
                                    HareketTuru = hareketTuru,
                                    Tarih = viewModel.FaturaTarihi.HasValue ? viewModel.FaturaTarihi.Value : DateTime.Now,
                                    ReferansNo = viewModel.FaturaNumarasi,
                                    ReferansTuru = "Fatura",
                            ReferansID = fatura.FaturaID,
                                    Aciklama = $"{viewModel.FaturaNumarasi} numaralı fatura",
                                    OlusturmaTarihi = DateTime.Now,
                                    SoftDelete = false
                                };

                                _context.CariHareketler.Add(yeniCariHareket);
                            }
                            else
                            {
                                // Aynı cari, sadece tutarı güncelle
                                mevcutCariHareket.Tutar = genelToplam;
                                mevcutCariHareket.HareketTuru = hareketTuru;
                                mevcutCariHareket.Tarih = viewModel.FaturaTarihi.HasValue ? viewModel.FaturaTarihi.Value : DateTime.Now;
                                mevcutCariHareket.ReferansNo = viewModel.FaturaNumarasi;
                                mevcutCariHareket.Aciklama = $"{viewModel.FaturaNumarasi} numaralı fatura";
                                mevcutCariHareket.GuncellemeTarihi = DateTime.Now;

                                _context.CariHareketler.Update(mevcutCariHareket);
                            }
                    }
                    else
                    {
                            // Mevcut cari hareket yoksa yeni oluştur
                            var yeniCariHareket = new CariHareket
                        {
                            CariHareketID = Guid.NewGuid(),
                                CariID = viewModel.CariID,
                                Tutar = genelToplam,
                                HareketTuru = hareketTuru,
                                Tarih = viewModel.FaturaTarihi.HasValue ? viewModel.FaturaTarihi.Value : DateTime.Now,
                                ReferansNo = viewModel.FaturaNumarasi,
                                ReferansTuru = "Fatura",
                            ReferansID = fatura.FaturaID,
                                Aciklama = $"{viewModel.FaturaNumarasi} numaralı fatura",
                                OlusturmaTarihi = DateTime.Now,
                                SoftDelete = false
                            };

                            _context.CariHareketler.Add(yeniCariHareket);
                        }
                    }

                    await _context.SaveChangesAsync();
                    return RedirectToAction(nameof(Index));
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!await FaturaExists(viewModel.FaturaID))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
            }

            ViewBag.Cariler = new SelectList(_context.Cariler.Where(c => !c.SoftDelete && c.Aktif), "CariID", "CariAdi", viewModel.CariID);
            ViewBag.FaturaTurleri = new SelectList(_context.FaturaTurleri, "FaturaTuruID", "FaturaTuruAdi", viewModel.FaturaTuruID);
            ViewBag.OdemeTurleri = new SelectList(_context.OdemeTurleri, "OdemeTuruID", "OdemeTuruAdi");
            ViewBag.Urunler = new SelectList(_context.Urunler.Where(u => !u.SoftDelete && u.Aktif), "UrunID", "UrunAdi");

            return View(viewModel);
        }

        // GET: Fatura/Delete/5
        public async Task<IActionResult> Delete(Guid? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var fatura = await _context.Faturalar
                .Include(f => f.Cari)
                .Include(f => f.FaturaDetaylari)
                .FirstOrDefaultAsync(f => f.FaturaID == id && !f.SoftDelete);

            if (fatura == null)
            {
                return NotFound();
            }

            return View(fatura);
        }

        // POST: Fatura/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(Guid id)
        {
            var fatura = await _context.Faturalar.FindAsync(id);
            if (fatura != null)
            {
                fatura.SoftDelete = true;
                fatura.GuncellemeTarihi = DateTime.Now;
                _context.Faturalar.Update(fatura);
                await _context.SaveChangesAsync();
            }
            
            return RedirectToAction(nameof(Index));
        }

        private async Task<bool> FaturaExists(Guid id)
        {
            return await _context.Faturalar.AnyAsync(f => f.FaturaID == id);
        }

        // GET: Fatura/GetUrunDetay/5
        [HttpGet]
        public async Task<IActionResult> GetUrunDetay(Guid id)
        {
            var urun = await _context.Urunler.FindAsync(id);
            if (urun == null)
            {
                return NotFound();
            }

            var urunFiyat = await _context.UrunFiyatlari
                .Where(uf => uf.UrunID == id && !uf.SoftDelete)
                .OrderByDescending(uf => uf.GecerliTarih)
                .FirstOrDefaultAsync();

            var result = new
            {
                UrunID = urun.UrunID,
                UrunAdi = urun.UrunAdi,
                UrunKodu = urun.UrunKodu,
                Birim = urun.Birim,
                BirimFiyat = urunFiyat?.Fiyat ?? 0,
                StokMiktar = urun.StokMiktar
            };

            return Json(result);
        }

        // GET: Fatura/AddOdeme/5
        public async Task<IActionResult> AddOdeme(Guid id)
        {
            var fatura = await _context.Faturalar
                .Include(f => f.Cari)
                .Include(f => f.FaturaOdemeleri)
                .FirstOrDefaultAsync(f => f.FaturaID == id && !f.SoftDelete);

            if (fatura == null)
            {
                return NotFound();
            }

            // Toplam ödeme tutarını hesapla
            decimal toplamOdeme = fatura.FaturaOdemeleri?.Sum(o => o.OdemeTutari) ?? 0;
            decimal kalanTutar = (fatura.GenelToplam ?? 0) - toplamOdeme;

            var viewModel = new FaturaOdemeViewModel
            {
                FaturaID = fatura.FaturaID,
                FaturaNumarasi = fatura.FaturaNumarasi,
                CariAdi = fatura.Cari?.CariAdi,
                GenelToplam = fatura.GenelToplam ?? 0,
                OdenenTutar = toplamOdeme,
                KalanTutar = kalanTutar,
                OdemeTarihi = DateTime.Now,
                Tutar = kalanTutar
            };

            ViewBag.OdemeTurleri = new SelectList(_context.OdemeTurleri, "OdemeTuruID", "OdemeTuruAdi");
            return View(viewModel);
        }

        // POST: Fatura/AddOdeme/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> AddOdeme(FaturaOdemeViewModel viewModel)
        {
            // AJAX isteği için ContentType kontrolü
            bool isAjaxRequest = Request.Headers["X-Requested-With"] == "XMLHttpRequest";
            
            try
            {
                // Debug için
                System.Diagnostics.Debug.WriteLine($"Gelen OdemeTuruID: {viewModel.OdemeTuruID}");
                
                // Tüm form verilerini konsola yazdır
                foreach (var key in Request.Form.Keys)
                {
                    System.Diagnostics.Debug.WriteLine($"Form Değeri: {key} = {Request.Form[key]}");
                }
                
                // Manuel validasyon kontrolü
                if (string.IsNullOrEmpty(viewModel.CariAdi))
                {
                    ModelState.AddModelError("CariAdi", "Cari Adı alanı gereklidir.");
                }
                
                if (string.IsNullOrEmpty(viewModel.FaturaNumarasi))
                {
                    ModelState.AddModelError("FaturaNumarasi", "Fatura No alanı gereklidir.");
                }
                
                // OdemeTuruID kontrolü yaparken form değerini manuel olarak kontrol et
                string odemeTuruIDStr = Request.Form["OdemeTuruID"];
                if (string.IsNullOrEmpty(odemeTuruIDStr) || !int.TryParse(odemeTuruIDStr, out int odemeTuruID) || odemeTuruID <= 0)
                {
                    ModelState.AddModelError("OdemeTuruID", "Ödeme türü seçilmelidir.");
                    System.Diagnostics.Debug.WriteLine("OdemeTuruID geçersiz: " + odemeTuruIDStr);
                }
                else
                {
                    // Doğru OdemeTuruID değeri geldi, modele ata
                    viewModel.OdemeTuruID = odemeTuruID;
                }
                
                if (viewModel.Tutar <= 0)
                {
                    ModelState.AddModelError("Tutar", "Ödeme tutarı 0'dan büyük olmalıdır.");
                }
                
                if (viewModel.OdemeTarihi == null)
                {
                    ModelState.AddModelError("OdemeTarihi", "Ödeme tarihi girilmelidir.");
                }
                
                // Model durumunu konsola yazdır
                foreach (var state in ModelState)
                {
                    System.Diagnostics.Debug.WriteLine($"Key: {state.Key}, Valid: {state.Value.ValidationState}, Errors: {state.Value.Errors.Count}");
                    foreach (var error in state.Value.Errors)
                    {
                        System.Diagnostics.Debug.WriteLine($"Error: {error.ErrorMessage}");
                    }
                }
                
                if (ModelState.IsValid)
                {
                    var fatura = await _context.Faturalar
                        .Include(f => f.FaturaOdemeleri)
                        .FirstOrDefaultAsync(f => f.FaturaID == viewModel.FaturaID && !f.SoftDelete);

                    if (fatura == null)
                    {
                        if (isAjaxRequest)
                        {
                            return Json(new { success = false, errors = new[] { "Fatura bulunamadı." } });
                        }
                        return NotFound();
                    }

                    // Ödeme türünü al
                    var odemeTuru = await _context.OdemeTurleri.FindAsync(viewModel.OdemeTuruID);
                    if (odemeTuru == null)
                    {
                        ModelState.AddModelError("OdemeTuruID", "Geçersiz ödeme türü.");
                        ViewBag.OdemeTurleri = new SelectList(_context.OdemeTurleri, "OdemeTuruID", "OdemeTuruAdi", viewModel.OdemeTuruID);
                        
                        if (isAjaxRequest)
                        {
                            return Json(new { success = false, errors = new[] { "Geçersiz ödeme türü." } });
                        }
                        return View(viewModel);
                    }

                    // Yeni ödeme oluştur
                    var odeme = new FaturaOdeme
                    {
                        OdemeID = Guid.NewGuid(),
                        FaturaID = viewModel.FaturaID,
                        OdemeTuru = odemeTuru.OdemeTuruAdi,
                        OdemeTutari = viewModel.Tutar,
                        OdemeTarihi = viewModel.OdemeTarihi,
                        Aciklama = viewModel.Aciklama,
                        OlusturmaTarihi = DateTime.Now,
                        SoftDelete = false
                    };

                    _context.FaturaOdemeleri.Add(odeme);

                    // Toplam ödeme tutarını hesapla
                    decimal toplamOdeme = (fatura.FaturaOdemeleri?.Sum(o => o.OdemeTutari) ?? 0) + viewModel.Tutar;
                    decimal kalanTutar = (fatura.GenelToplam ?? 0) - toplamOdeme;

                    // Fatura ödeme durumunu güncelle
                    if (kalanTutar <= 0)
                    {
                        fatura.OdemeDurumu = "Ödendi";
                    }
                    else if (toplamOdeme > 0)
                    {
                        fatura.OdemeDurumu = "Kısmi Ödeme";
                    }

                    fatura.GuncellemeTarihi = DateTime.Now;
                    _context.Faturalar.Update(fatura);

                    // Cari hareket oluştur
                    var cariHareket = new CariHareket
                    {
                        CariHareketID = Guid.NewGuid(),
                        CariID = fatura.CariID ?? Guid.Empty,
                        Tutar = viewModel.Tutar,
                        HareketTuru = "Tahsilat",
                        Tarih = viewModel.OdemeTarihi,
                        ReferansNo = fatura.FaturaNumarasi,
                        ReferansTuru = "Fatura Ödemesi",
                        ReferansID = odeme.OdemeID,
                        Aciklama = $"{fatura.FaturaNumarasi} numaralı fatura ödemesi",
                        IslemYapanKullaniciID = Guid.Parse("00000000-0000-0000-0000-000000000000"), // Kullanıcı ID'si
                        OlusturmaTarihi = DateTime.Now,
                        SoftDelete = false
                    };

                    _context.CariHareketler.Add(cariHareket);

                    try
                    {
                        await _context.SaveChangesAsync();
                        
                        // AJAX isteği için JSON sonucu döndür
                        if (isAjaxRequest)
                        {
                            return Json(new { success = true });
                        }
                        
                        return RedirectToAction(nameof(Details), new { id = viewModel.FaturaID });
            }
            catch (Exception ex)
            {
                        if (isAjaxRequest)
                        {
                            return Json(new { success = false, errors = new[] { "Ödeme kaydedilirken bir hata oluştu: " + ex.Message } });
                        }
                        
                        ModelState.AddModelError("", "Ödeme kaydedilirken bir hata oluştu: " + ex.Message);
                    }
                }
            }
            catch (Exception ex)
            {
                if (isAjaxRequest)
                {
                    return Json(new { success = false, errors = new[] { "Ödeme kaydedilirken bir hata oluştu: " + ex.Message } });
                }
                
                ModelState.AddModelError("", "Ödeme kaydedilirken bir hata oluştu: " + ex.Message);
            }

            ViewBag.OdemeTurleri = new SelectList(_context.OdemeTurleri, "OdemeTuruID", "OdemeTuruAdi", viewModel.OdemeTuruID);
            
            // AJAX isteği için hata mesajlarını JSON olarak döndür
            if (isAjaxRequest)
            {
                return Json(new { success = false, errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage).ToArray() });
            }
            
            return View(viewModel);
        }

        // POST: Fatura/DeleteOdeme/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteOdeme(Guid id)
        {
            var odeme = await _context.FaturaOdemeleri.FindAsync(id);
            if (odeme == null)
            {
                return NotFound();
            }

            var fatura = await _context.Faturalar
                .Include(f => f.FaturaOdemeleri)
                .FirstOrDefaultAsync(f => f.FaturaID == odeme.FaturaID);

            if (fatura == null)
            {
                return NotFound();
            }

            // Cari hareketi bul ve sil
            var cariHareket = await _context.CariHareketler
                .FirstOrDefaultAsync(ch => ch.ReferansID == odeme.OdemeID && ch.ReferansTuru == "Fatura Ödeme");

            if (cariHareket != null)
            {
                _context.CariHareketler.Remove(cariHareket);
            }

            // Ödemeyi sil
            _context.FaturaOdemeleri.Remove(odeme);

            // Toplam ödeme tutarını hesapla
            decimal toplamOdeme = fatura.FaturaOdemeleri
                .Where(o => o.OdemeID != id)
                .Sum(o => o.OdemeTutari);

            decimal kalanTutar = (fatura.GenelToplam ?? 0) - toplamOdeme;

            // Fatura ödeme durumunu güncelle
            if (toplamOdeme <= 0)
            {
                fatura.OdemeDurumu = "Bekliyor";
            }
            else if (kalanTutar > 0)
            {
                fatura.OdemeDurumu = "Kısmi Ödeme";
            }
            else
            {
                fatura.OdemeDurumu = "Ödendi";
            }

            fatura.GuncellemeTarihi = DateTime.Now;
            _context.Faturalar.Update(fatura);

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Details), new { id = fatura.FaturaID });
        }

        // GET: Fatura/GetNewFaturaNumber
        [HttpGet]
        public IActionResult GetNewFaturaNumber()
        {
            string faturaNo = GenerateNewFaturaNumber();
            return Json(faturaNo);
        }

        // GET: Fatura/GetNewSiparisNumarasi
        [HttpGet]
        public IActionResult GetNewSiparisNumarasi()
        {
            string siparisNo = GenerateSiparisNumarasi();
            return Json(siparisNo);
        }

        // GET: Fatura/GetUrunBilgileri/5
        [HttpGet]
        public async Task<IActionResult> GetUrunBilgileri(Guid id)
        {
            var urun = await _context.Urunler
                .Include(u => u.Birim)
                .FirstOrDefaultAsync(u => u.UrunID == id);
                
            if (urun == null)
            {
                return NotFound();
            }

            var urunFiyat = await _context.UrunFiyatlari
                .Where(uf => uf.UrunID == id && !uf.SoftDelete)
                .OrderByDescending(uf => uf.GecerliTarih)
                .FirstOrDefaultAsync();

            var result = new
            {
                UrunID = urun.UrunID,
                UrunAdi = urun.UrunAdi,
                Birim = urun.Birim?.BirimAdi ?? "Adet",
                BirimFiyat = urunFiyat?.Fiyat ?? 0,
                StokMiktar = urun.StokMiktar
            };

            return Json(result);
        }

        // GET: Fatura/PrintFatura/5
        public async Task<IActionResult> PrintFatura(Guid? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var fatura = await _context.Faturalar
                .Include(f => f.Cari)
                .Include(f => f.FaturaDetaylari)
                .ThenInclude(fd => fd.Urun)
                .Include(f => f.FaturaOdemeleri)
                .Include(f => f.FaturaTuru)
                .FirstOrDefaultAsync(f => f.FaturaID == id && !f.SoftDelete);

            if (fatura == null)
            {
                return NotFound();
            }

            // Sistem ayarlarını al
            var sistemAyarlari = await _context.SistemAyarlari.FirstOrDefaultAsync();
            if (sistemAyarlari == null)
            {
                sistemAyarlari = new Data.Entities.SistemAyarlari
                {
                    SirketAdi = "Şirket Adı",
                    SirketAdresi = "Şirket Adresi",
                    SirketTelefon = "Telefon",
                    SirketEmail = "Email",
                    SirketVergiNo = "Vergi No",
                    SirketVergiDairesi = "Vergi Dairesi"
                };
            }

            // Toplam ödeme tutarını hesapla
            decimal toplamOdeme = 0;
            if (fatura.FaturaOdemeleri != null && fatura.FaturaOdemeleri.Any())
            {
                toplamOdeme = fatura.FaturaOdemeleri.Sum(o => o.OdemeTutari);
            }
            
            decimal genelToplam = fatura.GenelToplam ?? 0;
            decimal kalanTutar = genelToplam - toplamOdeme;

            // Şirket bilgilerini ViewBag'e aktar
            ViewBag.SirketAdi = sistemAyarlari.SirketAdi;
            ViewBag.SirketAdresi = sistemAyarlari.SirketAdresi;
            ViewBag.SirketTelefon = sistemAyarlari.SirketTelefon;
            ViewBag.SirketEmail = sistemAyarlari.SirketEmail;
            ViewBag.SirketVergiNo = sistemAyarlari.SirketVergiNo;
            ViewBag.SirketVergiDairesi = sistemAyarlari.SirketVergiDairesi;

            var viewModel = new FaturaDetailViewModel
            {
                FaturaID = fatura.FaturaID,
                FaturaNumarasi = fatura.FaturaNumarasi,
                SiparisNumarasi = fatura.SiparisNumarasi,
                FaturaTarihi = fatura.FaturaTarihi,
                VadeTarihi = fatura.VadeTarihi,
                CariID = fatura.CariID ?? Guid.Empty,
                CariAdi = fatura.Cari?.CariAdi ?? "Belirtilmemiş",
                CariVergiNo = fatura.Cari?.VergiNo ?? "Belirtilmemiş",
                CariAdres = fatura.Cari?.Adres ?? "Belirtilmemiş",
                CariTelefon = fatura.Cari?.Telefon ?? "Belirtilmemiş",
                FaturaTuru = fatura.FaturaTuru?.FaturaTuruAdi ?? "Belirtilmemiş",
                AraToplam = (decimal)(fatura.AraToplam ?? 0),
                KdvTutari = (decimal)(fatura.KDVToplam ?? 0),
                KdvToplam = (decimal)(fatura.KDVToplam ?? 0),
                IndirimTutari = 0,
                GenelToplam = genelToplam,
                OdenecekTutar = kalanTutar,
                OdenenTutar = toplamOdeme,
                KalanTutar = kalanTutar,
                DovizTuru = fatura.DovizTuru ?? "TRY",
                DovizKuru = (decimal)(fatura.DovizKuru ?? 1),
                Aciklama = fatura.FaturaNotu,
                OdemeDurumu = fatura.OdemeDurumu,
                OlusturmaTarihi = fatura.OlusturmaTarihi,
                GuncellemeTarihi = fatura.GuncellemeTarihi,
                Aktif = fatura.Aktif ?? true
            };

            // Fatura kalemlerini ekle
            if (fatura.FaturaDetaylari != null)
            {
                foreach (var detay in fatura.FaturaDetaylari.Where(d => !d.SoftDelete))
                {
                    viewModel.FaturaKalemleri.Add(new FaturaKalemDetailViewModel
                    {
                        KalemID = detay.FaturaDetayID,
                        UrunID = detay.UrunID.HasValue ? detay.UrunID.Value : Guid.Empty,
                        UrunKodu = detay.Urun?.UrunKodu ?? "",
                        UrunAdi = detay.Urun?.UrunAdi ?? "",
                        Miktar = detay.Miktar.HasValue ? detay.Miktar.Value : 0,
                        Birim = detay.Birim ?? "",
                        BirimFiyat = detay.BirimFiyat.HasValue ? detay.BirimFiyat.Value : 0,
                        KdvOrani = detay.KdvOrani.HasValue ? (int)detay.KdvOrani.Value : 0,
                        IndirimOrani = detay.IndirimOrani.HasValue ? (int)detay.IndirimOrani.Value : 0,
                        Tutar = detay.Tutar.GetValueOrDefault(),
                        KdvTutari = detay.KdvTutari.GetValueOrDefault(),
                        IndirimTutari = detay.IndirimTutari.GetValueOrDefault(),
                        NetTutar = detay.NetTutar.GetValueOrDefault()
                    });
                }
            }

            // Ödemeleri ekle
            if (fatura.FaturaOdemeleri != null)
            {
                viewModel.Odemeler = fatura.FaturaOdemeleri
                    .Where(o => !o.SoftDelete)
                    .Select(o => new OdemeViewModel
                    {
                        OdemeID = o.OdemeID,
                        OdemeTarihi = o.OdemeTarihi,
                        OdemeTutari = o.OdemeTutari,
                        OdemeTuru = o.OdemeTuru,
                        Aciklama = o.Aciklama
                    }).ToList();
            }

            return View(viewModel);
        }

        // GET: Fatura/Print/5
        public async Task<IActionResult> Print(Guid id)
        {
            var fatura = await _context.Faturalar
                .Include(f => f.Cari)
                .Include(f => f.FaturaTuru)
                .Include(f => f.FaturaDetaylari)
                    .ThenInclude(fd => fd.Urun)
                .Include(f => f.FaturaOdemeleri)
                .FirstOrDefaultAsync(f => f.FaturaID == id && !f.SoftDelete);

            if (fatura == null)
            {
                return NotFound();
            }

            // Toplam ödeme tutarını hesapla
            decimal toplamOdeme = fatura.FaturaOdemeleri?.Sum(o => o.OdemeTutari) ?? 0;
            decimal kalanTutar = (fatura.GenelToplam ?? 0) - toplamOdeme;

            var viewModel = new FaturaDetailViewModel
            {
                FaturaID = fatura.FaturaID,
                FaturaNumarasi = fatura.FaturaNumarasi,
                FaturaTarihi = fatura.FaturaTarihi,
                VadeTarihi = fatura.VadeTarihi,
                CariID = fatura.CariID ?? Guid.Empty,
                CariAdi = fatura.Cari?.CariAdi ?? "Belirtilmemiş",
                CariVergiNo = fatura.Cari?.VergiNo ?? "Belirtilmemiş",
                CariAdres = fatura.Cari?.Adres ?? "Belirtilmemiş",
                CariTelefon = fatura.Cari?.Telefon ?? "Belirtilmemiş",
                FaturaTuru = fatura.FaturaTuru?.FaturaTuruAdi ?? "Belirtilmemiş",
                AraToplam = fatura.AraToplam ?? 0,
                KdvTutari = fatura.KDVToplam ?? 0,
                GenelToplam = fatura.GenelToplam ?? 0,
                OdemeDurumu = fatura.OdemeDurumu,
                OlusturmaTarihi = fatura.OlusturmaTarihi ?? DateTime.Now,
                GuncellemeTarihi = fatura.GuncellemeTarihi,
                Aciklama = fatura.FaturaNotu,
                OdenecekTutar = kalanTutar,
                FaturaKalemleri = fatura.FaturaDetaylari.Select(fd => new FaturaKalemDetailViewModel
                {
                    KalemID = fd.FaturaDetayID,
                    UrunID = fd.UrunID,
                    UrunAdi = fd.Urun?.UrunAdi ?? "Belirtilmemiş",
                    Miktar = fd.Miktar,
                    BirimFiyat = fd.BirimFiyat,
                    KdvOrani = (int)fd.KdvOrani,
                    IndirimOrani = (int)fd.IndirimOrani,
                    Tutar = fd.SatirToplam ?? 0,
                    KdvTutari = fd.KdvTutari ?? 0,
                    IndirimTutari = fd.IndirimTutari ?? 0,
                    NetTutar = fd.NetTutar ?? 0,
                    Birim = fd.Birim
                }).ToList(),
                Odemeler = fatura.FaturaOdemeleri.Select(o => new OdemeViewModel
                {
                    OdemeID = o.OdemeID,
                    OdemeTuru = o.OdemeTuru,
                    OdemeTutari = o.OdemeTutari,
                    OdemeTarihi = o.OdemeTarihi,
                    Aciklama = o.Aciklama
                }).ToList()
            };

            return View(viewModel);
        }

        // POST: Fatura/OdemeEkle
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> OdemeEkle(Guid FaturaID, DateTime OdemeTarihi, int OdemeTuruID, decimal OdemeTutari, string Aciklama, Guid? KasaID, Guid? BankaID)
        {
            if (FaturaID == Guid.Empty)
            {
                return BadRequest("Fatura ID geçersiz.");
            }

            var fatura = await _context.Faturalar
                .Include(f => f.FaturaOdemeleri)
                .Include(f => f.Cari)
                .FirstOrDefaultAsync(f => f.FaturaID == FaturaID && !f.SoftDelete);

            if (fatura == null)
            {
                return NotFound("Fatura bulunamadı.");
            }

            var odemeTuru = await _context.OdemeTurleri.FindAsync(OdemeTuruID);
            if (odemeTuru == null)
            {
                return NotFound("Ödeme türü bulunamadı.");
            }

            // Fatura türünü ayrıca veritabanından çekelim
            var faturaTuru = await _context.FaturaTurleri.FindAsync(fatura.FaturaTuruID);
            if (faturaTuru == null)
            {
                return NotFound("Fatura türü bulunamadı.");
            }

            // Ödeme türüne göre kasa veya banka kontrolü
            if (odemeTuru.OdemeTuruAdi.Contains("Nakit") && !KasaID.HasValue)
            {
                return BadRequest("Nakit ödemeler için kasa seçimi zorunludur.");
            }
            
            if ((odemeTuru.OdemeTuruAdi.Contains("Havale") || odemeTuru.OdemeTuruAdi.Contains("EFT") || odemeTuru.OdemeTuruAdi.Contains("Banka")) && !BankaID.HasValue)
            {
                return BadRequest("Banka ödemeleri için banka seçimi zorunludur.");
            }

            // Yeni ödeme kaydı oluştur
            var odeme = new FaturaOdeme
            {
                OdemeID = Guid.NewGuid(),
                FaturaID = FaturaID,
                OdemeTuru = odemeTuru.OdemeTuruAdi,
                OdemeTutari = OdemeTutari,
                OdemeTarihi = OdemeTarihi,
                Aciklama = Aciklama,
                OlusturmaTarihi = DateTime.Now,
                SoftDelete = false
            };

            _context.FaturaOdemeleri.Add(odeme);

            // Toplam ödeme tutarını hesapla
            decimal toplamOdeme = (fatura.FaturaOdemeleri?.Sum(o => o.OdemeTutari) ?? 0) + OdemeTutari;
            decimal kalanTutar = (fatura.GenelToplam ?? 0) - toplamOdeme;

            // Fatura ödeme durumunu güncelle
            if (kalanTutar <= 0)
            {
                fatura.OdemeDurumu = "Ödendi";
            }
            else if (toplamOdeme > 0)
            {
                fatura.OdemeDurumu = "Kısmi Ödeme";
            }

            fatura.GuncellemeTarihi = DateTime.Now;
            _context.Faturalar.Update(fatura);

            // Cari hareket oluştur
            if (fatura.Cari != null)
            {
                // Fatura türüne göre işlem yönünü belirle
                bool isTahsilat = faturaTuru.HareketTuru == "Satış"; // Satış faturası ise tahsilat, alış faturası ise ödeme

                // Ödeme türüne göre kasa veya banka hareketi oluştur
                if (odemeTuru.OdemeTuruAdi.Contains("Nakit") && KasaID.HasValue)
                {
                    // Kasa hareketi oluştur
                    var kasaHareket = new KasaHareket
                    {
                        KasaHareketID = Guid.NewGuid(),
                        KasaID = KasaID.Value,
                        CariID = fatura.CariID,
                        Tutar = OdemeTutari,
                        HareketTuru = isTahsilat ? "Giriş" : "Çıkış",
                        IslemTuru = "Normal",
                        Tarih = OdemeTarihi,
                        ReferansNo = fatura.FaturaNumarasi,
                        ReferansTuru = "Fatura Ödemesi",
                        ReferansID = FaturaID,
                        Aciklama = $"{fatura.FaturaNumarasi} numaralı fatura {(isTahsilat ? "tahsilatı" : "ödemesi")} - {Aciklama}",
                        OlusturmaTarihi = DateTime.Now,
                        SoftDelete = false
                    };
                    _context.KasaHareketleri.Add(kasaHareket);
                }
                else if (BankaID.HasValue)
                {
                    // Banka hareketi oluştur
                    var bankaHareket = new BankaHareket
                    {
                        BankaHareketID = Guid.NewGuid(),
                        BankaID = BankaID.Value,
                        CariID = fatura.CariID,
                        Tutar = OdemeTutari,
                        HareketTuru = isTahsilat ? "Para Yatırma" : "Para Çekme",
                        Tarih = OdemeTarihi,
                        ReferansNo = fatura.FaturaNumarasi,
                        ReferansTuru = "Fatura Ödemesi",
                        ReferansID = FaturaID,
                        Aciklama = $"{fatura.FaturaNumarasi} numaralı fatura {(isTahsilat ? "tahsilatı" : "ödemesi")} - {Aciklama}",
                        DekontNo = $"OD-{DateTime.Now.ToString("yyyyMMddHHmmss")}",
                        OlusturmaTarihi = DateTime.Now,
                        SoftDelete = false
                    };
                    _context.BankaHareketleri.Add(bankaHareket);
                }
            }

            await _context.SaveChangesAsync();

            return RedirectToAction(nameof(Details), new { id = FaturaID });
        }

        // GET: Fatura/CreateIrsaliye/5
        public async Task<IActionResult> CreateIrsaliye(Guid id)
        {
            var fatura = await _context.Faturalar
                .Include(f => f.Cari)
                .Include(f => f.FaturaDetaylari)
                .ThenInclude(fd => fd.Urun)
                .FirstOrDefaultAsync(f => f.FaturaID == id && !f.SoftDelete);

            if (fatura == null)
            {
                TempData["ErrorMessage"] = "Fatura bulunamadı.";
                return RedirectToAction(nameof(Index));
            }

            // İrsaliye türünü belirle
            string irsaliyeTuru = "Çıkış"; // Varsayılan olarak çıkış irsaliyesi
            var faturaTuru = await _context.FaturaTurleri.FindAsync(fatura.FaturaTuruID);
            if (faturaTuru != null)
            {
                if (faturaTuru.FaturaTuruAdi.ToLower().Contains("alış") || faturaTuru.FaturaTuruAdi.ToLower().Contains("alis"))
                {
                    irsaliyeTuru = "Giriş"; // Alış faturası için giriş irsaliyesi
                }
            }

            // Yeni irsaliye numarası oluştur
            string irsaliyeNumarasi = $"IRS-{DateTime.Now.ToString("yyMMdd")}-{new Random().Next(1000, 9999)}";

            // İrsaliye ViewModel oluştur
            var viewModel = new IrsaliyeCreateViewModel
            {
                IrsaliyeNumarasi = irsaliyeNumarasi,
                IrsaliyeTarihi = DateTime.Today,
                SevkTarihi = DateTime.Today,
                CariID = fatura.CariID ?? Guid.Empty,
                IrsaliyeTuru = irsaliyeTuru,
                FaturaID = fatura.FaturaID,
                Aciklama = $"{fatura.FaturaNumarasi} numaralı faturadan oluşturulmuştur.",
                Durum = "Açık",
                IrsaliyeKalemleri = fatura.FaturaDetaylari.Select(fd => new IrsaliyeKalemViewModel
                {
                    UrunID = fd.UrunID,
                    UrunAdi = fd.Urun?.UrunAdi ?? "Belirtilmemiş",
                    Miktar = fd.Miktar,
                    Birim = fd.Birim ?? "Adet",
                    Aciklama = ""
                }).ToList()
            };

            // TempData'ya viewModel'i kaydet
            TempData["IrsaliyeViewModel"] = System.Text.Json.JsonSerializer.Serialize(viewModel);

            // İrsaliye oluşturma sayfasına yönlendir
            return RedirectToAction("CreateFromFatura", "Irsaliye", new { faturaId = id });
        }

        // GET: Fatura/CreateFromIrsaliye/5
        public async Task<IActionResult> CreateFromIrsaliye(Guid id)
        {
            // İrsaliye bilgilerini al
            var irsaliye = await _context.Irsaliyeler
                .Include(i => i.Cari)
                .Include(i => i.IrsaliyeDetaylari)
                .ThenInclude(id => id.Urun)
                .FirstOrDefaultAsync(i => i.IrsaliyeID == id && !i.SoftDelete);

            if (irsaliye == null)
            {
                return NotFound();
            }

            // Fatura türünü belirle
            int faturaTuruID = 1; // Varsayılan olarak satış faturası
            if (irsaliye.IrsaliyeTuru == "Giriş")
            {
                // Giriş irsaliyesi için alış faturası
                var alisFaturaTuru = await _context.FaturaTurleri
                    .FirstOrDefaultAsync(ft => ft.FaturaTuruAdi.ToLower().Contains("alış"));
                
                if (alisFaturaTuru != null)
                {
                    faturaTuruID = alisFaturaTuru.FaturaTuruID;
                }
            }
            else
            {
                // Çıkış irsaliyesi için satış faturası
                var satisFaturaTuru = await _context.FaturaTurleri
                    .FirstOrDefaultAsync(ft => ft.FaturaTuruAdi.ToLower().Contains("satış"));
                
                if (satisFaturaTuru != null)
                {
                    faturaTuruID = satisFaturaTuru.FaturaTuruID;
                }
            }

            // Yeni fatura numarası oluştur
            string faturaNumarasi = GenerateNewFaturaNumber();
            string siparisNumarasi = GenerateSiparisNumarasi();

            // Fatura kalemleri oluştur
            var faturaKalemleri = new List<FaturaKalemViewModel>();
            decimal araToplam = 0;
            decimal kdvToplam = 0;
            decimal genelToplam = 0;

            foreach (var kalem in irsaliye.IrsaliyeDetaylari)
            {
                // Ürün fiyatını al
                var urunFiyat = await _context.UrunFiyatlari
                    .Where(uf => uf.UrunID == kalem.UrunID && !uf.SoftDelete)
                    .OrderByDescending(uf => uf.GecerliTarih)
                    .FirstOrDefaultAsync();

                decimal birimFiyat = urunFiyat?.Fiyat ?? 0;
                int kdvOrani = 18; // Varsayılan KDV oranı
                decimal tutar = birimFiyat * kalem.Miktar;
                decimal kdvTutari = tutar * (kdvOrani / 100m);
                decimal netTutar = tutar + kdvTutari;

                araToplam += tutar;
                kdvToplam += kdvTutari;
                genelToplam += netTutar;

                faturaKalemleri.Add(new FaturaKalemViewModel
                {
                    UrunID = kalem.UrunID,
                    UrunAdi = kalem.Urun?.UrunAdi ?? "Belirtilmemiş",
                    Miktar = kalem.Miktar,
                    BirimFiyat = birimFiyat,
                    KdvOrani = kdvOrani,
                    IndirimOrani = 0,
                    Tutar = tutar,
                    KdvTutari = kdvTutari,
                    IndirimTutari = 0,
                    NetTutar = netTutar,
                    Birim = kalem.Birim
                });
            }

            // Fatura ViewModel oluştur
            var viewModel = new FaturaCreateViewModel
            {
                FaturaNumarasi = faturaNumarasi,
                SiparisNumarasi = siparisNumarasi,
                FaturaTarihi = DateTime.Today,
                VadeTarihi = DateTime.Today.AddDays(30),
                CariID = irsaliye.CariID,
                FaturaTuruID = faturaTuruID,
                Resmi = true,
                Aciklama = $"{irsaliye.IrsaliyeNumarasi} numaralı irsaliyeden oluşturulmuştur.",
                OdemeDurumu = "Bekliyor",
                DovizTuru = "TRY",
                DovizKuru = 1,
                FaturaKalemleri = faturaKalemleri
            };

            ViewBag.Cariler = new SelectList(_context.Cariler.Where(c => !c.SoftDelete && c.Aktif), "CariID", "CariAdi", viewModel.CariID);
            ViewBag.FaturaTurleri = new SelectList(_context.FaturaTurleri, "FaturaTuruID", "FaturaTuruAdi", viewModel.FaturaTuruID);
            ViewBag.OdemeTurleri = new SelectList(_context.OdemeTurleri, "OdemeTuruID", "OdemeTuruAdi");
            ViewBag.Urunler = new SelectList(_context.Urunler.Where(u => !u.SoftDelete && u.Aktif), "UrunID", "UrunAdi");

            // İrsaliye ID'sini TempData'ya kaydet
            TempData["IrsaliyeID"] = id.ToString();

            return View("Create", viewModel);
        }
    }
} 