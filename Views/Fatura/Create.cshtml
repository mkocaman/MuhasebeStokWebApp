@using System.Linq
@model MuhasebeStokWebApp.ViewModels.Fatura.FaturaCreateViewModel
@{
    ViewData["Title"] = "Yeni Fatura";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@functions {
    public static string FormatDecimal(decimal value)
    {
        return value.ToString("N2", new System.Globalization.CultureInfo("tr-TR"));
    }
}

<style>
    /* Tablo hücrelerinin alt alta gelmesini önlemek için */
    #kalemlerTable tr {
        display: table-row !important;
    }
    
    #kalemlerTable td, #kalemlerTable th {
        display: table-cell !important;
        vertical-align: middle !important;
    }
    
    /* Select2 dropdown'ın tablo içinde düzgün görünmesi için */
    .select2-container {
        width: 100% !important;
    }
    
    /* Mobil görünümde yatay kaydırma */
    .table-responsive {
        overflow-x: auto;
    }
    
    /* Tablo hücrelerinin genişliğini korumak için */
    #kalemlerTable th, #kalemlerTable td {
        white-space: nowrap;
    }
    
    /* Uyarı mesajı stilini düzenleyelim */
    .performance-warning {
        background-color: #fff3cd;
        color: #856404;
        padding: 10px;
        margin-bottom: 15px;
        border-radius: 4px;
        border: 1px solid #ffeeba;
    }
</style>

<div class="container-fluid">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <div class="d-flex justify-content-between align-items-center">
                <h4 class="mb-0">Yeni Fatura Oluştur</h4>
                <a asp-action="Index" class="btn btn-light">
                    <i class="fas fa-arrow-left"></i> Listeye Dön
                </a>
            </div>
        </div>
        <div class="card-body">
            <!-- Performans uyarısı ekleyelim -->
            <div class="alert alert-warning performance-warning">
                <strong><i class="fas fa-exclamation-triangle"></i> Önemli Bilgilendirme</strong>
                <p class="mb-0">Fatura kaydetme işlemi, özellikle çok sayıda kalem içeren faturalarda uzun sürebilir. Lütfen işlem tamamlanana kadar bekleyin ve sayfayı yenilemeyin. Kaydetme işlemi arka planda devam edecektir.</p>
            </div>
            
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">
                    <strong><i class="fas fa-check-circle"></i> Başarılı!</strong>
                    <p class="mb-0">@TempData["SuccessMessage"]</p>
                </div>
            }
            
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger">
                    <strong><i class="fas fa-exclamation-circle"></i> Hata!</strong>
                    <p class="mb-0">@TempData["ErrorMessage"]</p>
                </div>
            }
            
            @if (Model.UrunListesiBosMu)
            {
                <div class="alert alert-warning">
                    <strong>Uyarı!</strong> Veritabanında ürün bulunamadı. Lütfen önce <a href="/Urun/Create">ürün ekleyin</a>.
                </div>
            }
            
            <form asp-action="Create" id="faturaForm" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                
                <!-- 1. Satır: Fatura No, Fatura Tarihi, Vade Tarihi -->
                <div class="row mb-3">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label asp-for="FaturaNumarasi" class="control-label">Fatura Numarası</label>
                            <input asp-for="FaturaNumarasi" class="form-control" />
                            <span asp-validation-for="FaturaNumarasi" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label asp-for="SiparisNumarasi" class="control-label">Sipariş Numarası</label>
                            <input asp-for="SiparisNumarasi" class="form-control" />
                            <span asp-validation-for="SiparisNumarasi" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            <label asp-for="FaturaTarihi" class="control-label">Fatura Tarihi</label>
                            <input asp-for="FaturaTarihi" class="form-control" type="date" value="@DateTime.Today.ToString("yyyy-MM-dd")" />
                            <span asp-validation-for="FaturaTarihi" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            <label asp-for="VadeTarihi" class="control-label">Vade Tarihi</label>
                            <input asp-for="VadeTarihi" class="form-control" type="date" value="@DateTime.Today.ToString("yyyy-MM-dd")" />
                            <span asp-validation-for="VadeTarihi" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                
                <!-- 2. Satır: Cari, Fatura Türü, Döviz Türü, Döviz Kuru -->
                <div class="row mb-3">
                    <div class="col-md-3">
                        <div class="form-group">
                            <label asp-for="CariID" class="control-label">Cari</label>
                            <select asp-for="CariID" class="form-control select2" asp-items="Model.Cariler" id="CariID">
                                <option value="">-- Cari Seçiniz --</option>
                            </select>
                            <span asp-validation-for="CariID" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label asp-for="FaturaTuruID" class="control-label">Fatura Türü</label>
                            <select asp-for="FaturaTuruID" class="form-control select2" asp-items="Model.FaturaTurleri">
                                <option value="">-- Fatura Türü Seçiniz --</option>
                            </select>
                            <span asp-validation-for="FaturaTuruID" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label asp-for="DovizTuru" class="control-label">Para Birimi</label>
                            <select asp-for="DovizTuru" class="form-control" id="dovizTuruSelect">
                                <option value="">-- Para Birimi Seçin --</option>
                                <option value="USD">USD - Amerikan Doları</option>
                                <option value="UZS">UZS - Özbekistan Somu</option>
                            </select>
                            <span asp-validation-for="DovizTuru" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label asp-for="DovizKuru" class="control-label" id="dovizKuruLabel">Döviz Kuru (1 USD = X UZS)</label>
                            <div class="input-group">
                                <input asp-for="DovizKuru" id="DovizKuru" class="form-control" type="number" step="0.0001" min="0.0001" />
                                <button type="button" class="btn btn-info" id="btnGetirKur">
                                    <i class="fas fa-sync"></i> Kur Getir
                                </button>
                            </div>
                            <span asp-validation-for="DovizKuru" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                
                <!-- 3. Satır: Resmi Fatura mı? Ve Sözleşme (Koşullu) -->
                <div class="row mb-3">
                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="form-check mt-4">
                                <input class="form-check-input" type="checkbox" asp-for="ResmiMi" id="resmiMiCheck" />
                                <label class="form-check-label" asp-for="ResmiMi">Resmi Fatura mı?</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label asp-for="OdemeDurumu" class="control-label">Ödeme Durumu</label>
                            <select asp-for="OdemeDurumu" class="form-control">
                                <option value="">-- Ödeme Durumu Seçiniz --</option>
                                <option value="Ödendi">Ödendi</option>
                                <option value="Ödenmedi">Ödenmedi</option>
                                <option value="Kısmi Ödeme">Kısmi Ödeme</option>
                            </select>
                            <span asp-validation-for="OdemeDurumu" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group" id="sozlesmeDiv" style="display: none;">
                            <label for="SozlesmeID" class="control-label">Sözleşme</label>
                            <select asp-for="SozlesmeID" class="form-control select2" asp-items="Model.Sozlesmeler">
                                <option value="">-- Sözleşme Seçiniz --</option>
                            </select>
                            <span asp-validation-for="SozlesmeID" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label asp-for="DepoID" class="control-label">Depo</label>
                            <select asp-for="DepoID" class="form-control select2" asp-items="Model.Depolar">
                                <option value="">-- Depo Seçiniz --</option>
                            </select>
                            <span asp-validation-for="DepoID" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                
                <!-- Otomatik İrsaliye oluştur (hidden) -->
                <input type="hidden" asp-for="OtomatikIrsaliyeOlustur" value="true" />
            
                <!-- Fatura Kalemleri -->
                <div class="card mt-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Fatura Kalemleri</h5>
                        <button type="button" class="btn btn-primary btn-sm" id="btnAddKalem">
                            <i class="fa fa-plus"></i> Kalem Ekle
                        </button>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-bordered table-striped" id="kalemlerTable">
                                <thead class="bg-primary text-white">
                                    <tr>
                                        <th style="color: black;">Ürün</th>
                                        <th style="width: 100px; color: black;">Miktar</th>
                                        <th style="width: 100px; color: black;">Birim</th>
                                        <th style="width: 120px; color: black;">Birim Fiyat</th>
                                        <th style="width: 80px; color: black;">KDV %</th>
                                        <th style="width: 80px; color: black;">İndirim %</th>
                                        <th style="width: 120px; color: black;">Tutar</th>
                                        <th style="width: 80px; color: black;">İşlemler</th>
                                    </tr>
                                </thead>
                                <tbody id="kalemlerBody">
                                    <!-- Kalemler JavaScript ile eklenecek -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Fatura Toplamları ve Açıklama -->
                <div class="row mt-4">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="Aciklama" class="control-label">Açıklama</label>
                            <textarea asp-for="Aciklama" class="form-control" rows="7" data-val="false"></textarea>
                            <span asp-validation-for="Aciklama" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <tbody>
                                    <tr>
                                        <th style="width: 200px;">Ara Toplam</th>
                                        <td class="text-right">
                                            <div class="input-group">
                                                <input id="AraToplam" name="AraToplam" class="form-control text-right" readonly />
                                                <div class="input-group-append">
                                                    <span class="input-group-text">$</span>
                                                </div>
                                            </div>
                                            <div class="input-group mt-1">
                                                <input id="AraToplamDoviz" name="AraToplamDoviz" class="form-control text-right" readonly />
                                                <div class="input-group-append">
                                                    <span class="input-group-text">so'm</span>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>KDV Tutarı</th>
                                        <td class="text-right">
                                            <div class="input-group">
                                                <input id="KdvTutari" name="KdvToplam" class="form-control text-right" readonly />
                                                <div class="input-group-append">
                                                    <span class="input-group-text">$</span>
                                                </div>
                                            </div>
                                            <div class="input-group mt-1">
                                                <input id="KdvTutariDoviz" name="KdvToplamDoviz" class="form-control text-right" readonly />
                                                <div class="input-group-append">
                                                    <span class="input-group-text">so'm</span>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>İndirim Tutarı</th>
                                        <td class="text-right">
                                            <div class="input-group">
                                                <input id="toplamIndirimTutari" class="form-control text-right" readonly />
                                                <div class="input-group-append">
                                                    <span class="input-group-text">$</span>
                                                </div>
                                            </div>
                                            <div class="input-group mt-1">
                                                <input id="toplamIndirimTutariDoviz" class="form-control text-right" readonly />
                                                <div class="input-group-append">
                                                    <span class="input-group-text">so'm</span>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                    <tr class="table-primary">
                                        <th>Genel Toplam</th>
                                        <td class="text-right">
                                            <div class="input-group">
                                                <input id="GenelToplam" name="GenelToplam" class="form-control text-right font-weight-bold" readonly />
                                                <div class="input-group-append">
                                                    <span class="input-group-text">$</span>
                                                </div>
                                            </div>
                                            <div class="input-group mt-1">
                                                <input id="GenelToplamDoviz" name="GenelToplamDoviz" class="form-control text-right font-weight-bold" readonly />
                                                <div class="input-group-append">
                                                    <span class="input-group-text">so'm</span>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Submit Button -->
                <div class="row mt-4">
                    <div class="col-12 text-right">
                        <button type="submit" id="submitBtn" class="btn btn-success">
                            <i class="fas fa-save"></i> Faturayı Kaydet
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Kalem Template (Gizli) -->
<script type="text/template" id="kalemTemplate">
    <tr class="kalem-row">
        <td>
            <select name="FaturaKalemleri[{index}].UrunID" class="form-control urun-select select2-in-table" required>
                <option value="">-- Ürün Seçiniz --</option>
                @if (ViewBag.Urunler != null)
                {
                    foreach (var urun in ViewBag.Urunler)
                    {
                        <option value="@urun.Value" data-birim="@(ViewBag.UrunBirimBilgileri != null && ViewBag.UrunBirimBilgileri.ContainsKey(urun.Value) ? ViewBag.UrunBirimBilgileri[urun.Value] : "Adet")">@urun.Text</option>
                    }
                }
            </select>
            <input type="hidden" name="FaturaKalemleri[{index}].UrunAdi" class="urun-adi" />
        </td>
        <td>
            <input type="number" name="FaturaKalemleri[{index}].Miktar" class="form-control miktar" value="1" min="0.01" step="0.01" required />
        </td>
        <td>
            <select name="FaturaKalemleri[{index}].Birim" class="form-control birim select2-in-table">
                @if (ViewBag.Birimler != null)
                {
                    foreach (var birim in ViewBag.Birimler)
                    {
                        <option value="@birim.Value">@birim.Text</option>
                    }
                }
            </select>
        </td>
        <td>
            <input type="number" name="FaturaKalemleri[{index}].BirimFiyat" class="form-control birim-fiyat" value="0" min="0.01" step="0.01" required />
        </td>
        <td>
            <input type="number" name="FaturaKalemleri[{index}].KdvOrani" class="form-control kdv-orani" value="0" min="0" max="100" />
        </td>
        <td>
            <input type="number" name="FaturaKalemleri[{index}].IndirimOrani" class="form-control indirim-orani" value="0" min="0" max="100" />
        </td>
        <td>
            <input type="text" name="FaturaKalemleri[{index}].Tutar" class="form-control tutar" readonly />
            <input type="hidden" name="FaturaKalemleri[{index}].KdvTutari" class="kdv-tutari" value="0" />
            <input type="hidden" name="FaturaKalemleri[{index}].NetTutar" class="net-tutar" value="0" />
        </td>
        <td>
            <button type="button" class="btn btn-danger btn-sm btn-remove-kalem">
                <i class="fa fa-trash"></i>
            </button>
        </td>
    </tr>
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <!-- Select2 kütüphanesi -->
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    
    <script type="text/javascript">
        // Cari - Para Birimi ilişkilerini JavaScript değişkenine aktar
        var cariParaBirimleri = @Html.Raw(Json.Serialize(ViewBag.CariParaBirimleri));
        
        $(document).ready(function () {
            // Açıklama ve Fatura Notu alanlarının zorunluluğunu kaldır
            $("#Aciklama").rules("remove", "required");
            $("[name='Aciklama']").removeAttr("data-val-required");
            $("#FaturaNotu").rules("remove", "required");
            $("[name='FaturaNotu']").removeAttr("data-val-required");
            
            var kalemIndex = 0;
            
            // Fatura numarası otomatik oluşturma
            if (!$("#FaturaNumarasi").val()) {
                $.ajax({
                    url: "/Fatura/GetNewFaturaNumber",
                    type: "GET",
                    success: function(data) {
                        $("#FaturaNumarasi").val(data);
                    },
                    error: function() {
                        console.error("Fatura numarası alınamadı");
                    }
                });
            }
            
            // Sipariş numarası otomatik oluşturma
            if (!$("#SiparisNumarasi").val()) {
                $.ajax({
                    url: "/Fatura/GetNewSiparisNumarasi",
                    type: "GET",
                    success: function(data) {
                        $("#SiparisNumarasi").val(data);
                    },
                    error: function() {
                        console.error("Sipariş numarası alınamadı");
                    }
                });
            }
            
            // Select2 entegrasyonu
            try {
                $('.select2').select2();
            } catch (e) {
                console.error("Select2 yüklenemedi:", e);
            }

            // Para birimi etiketlerini güncelleme fonksiyonu
            function updateCurrencyLabels() {
                var seciliParaBirimi = $('#dovizTuruSelect').val();
                
                // Para birimi seçilmemişse hiçbir şey yapma
                if (!seciliParaBirimi) {
                    return;
                }
                
                var dovizParaBirimi = seciliParaBirimi === 'USD' ? 'UZS' : 'USD';
                
                // Para birimi etiketlerini güncelle
                $('.seciliParaBirimi, #seciliParaBirimi, #seciliParaBirimi2, #seciliParaBirimi3, #seciliParaBirimi4').text(seciliParaBirimi);
                $('.dovizParaBirimi, #dovizParaBirimi, #dovizParaBirimi2, #dovizParaBirimi3, #dovizParaBirimi4').text(dovizParaBirimi);
                
                // Döviz kuru etiketi değişimi
                var labelText = "Döviz Kuru (1 " + seciliParaBirimi + " = X " + dovizParaBirimi + ")";
                $("#dovizKuruLabel").text(labelText);
                
                console.log("Para birimi etiketleri güncellendi - Seçili: " + seciliParaBirimi + ", Döviz: " + dovizParaBirimi);
            }

            // Sayfa yüklendiğinde para birimi seçili değilse döviz kuru boş olsun
            if (!$("#dovizTuruSelect").val()) {
                $("#DovizKuru").val("");
            }

            // Para birimi seçiliyse etiketleri güncelle
            if ($("#dovizTuruSelect").val()) {
                updateCurrencyLabels();
            }

            // Cari değiştiğinde
            $('#CariID').on('change', function() {
                var cariId = $(this).val();
                
                // Eğer bir cari seçildiyse ve bu carinin varsayılan para birimi varsa
                if (cariId && cariParaBirimleri && cariParaBirimleri[cariId]) {
                    // Döviz türünü otomatik güncelle
                    var dovizKodu = cariParaBirimleri[cariId];
                    // Sadece USD veya UZS ise seç, aksi halde varsayılan olarak USD kullan
                    if (dovizKodu === 'USD' || dovizKodu === 'UZS') {
                        $('#dovizTuruSelect').val(dovizKodu).trigger('change');
                    } else {
                        $('#dovizTuruSelect').val('').trigger('change');
                    }
                }
            });

            // Döviz Türü değiştiğinde
            $('#dovizTuruSelect').on('change', function() {
                var dovizKodu = $(this).val();
                
                // Para birimi seçilmemişse döviz kurunu temizle
                if (!dovizKodu) {
                    $("#DovizKuru").val("");
                    return; // İşlemi sonlandır
                }
                
                // UZS kurunun otomatik getirilmesi
                getUZSRate();
                
                // Para birimi etiketlerini güncelle
                updateCurrencyLabels();
                
                // Fatura toplamlarını güncelle
                calculateFaturaTotals();
                
                // Birim fiyat alanlarını güncellemek için kullanıcıya uyarı göster
                if ($("#kalemlerBody tr").length > 0) {
                    var mesaj = "Para birimi değiştirildi. Birim fiyatları " + dovizKodu + " olarak güncellemeniz gerekebilir.";
                    toastr ? toastr.warning(mesaj) : alert(mesaj);
                }
            });

            // UZS kurunu otomatik getirme fonksiyonu
            function getUZSRate() {
                var dovizKodu = $('#dovizTuruSelect').val();
                
                // Para birimi seçilmediyse işlemi yapma
                if (!dovizKodu) {
                    $("#DovizKuru").val("");
                    return;
                }
                
                // USD seçiliyse UZS kurunu getir, UZS seçiliyse USD kurunu getir
                var hedefDovizKodu = dovizKodu === 'USD' ? 'UZS' : 'USD';
                
                $.ajax({
                    url: "/Fatura/GetKurBilgisi?dovizKodu=" + hedefDovizKodu,
                    type: "GET",
                    success: function(data) {
                        if (data && data.success) {
                            var kur = data.kur || 13000; // Varsayılan olarak 13000 (veya başka makul bir değer)
                            $("#DovizKuru").val(kur);
                            console.log(hedefDovizKodu + " kuru başarıyla alındı: " + kur);
                            // Yeni kur ile toplamları güncelle
                            calculateFaturaTotals();
                        } else {
                            console.error(hedefDovizKodu + " kuru alınamadı, varsayılan değer kullanıldı");
                            $("#DovizKuru").val("");
                        }
                    },
                    error: function(err) {
                        console.error(hedefDovizKodu + " kuru alınırken hata oluştu:", err);
                        $("#DovizKuru").val("");
                    }
                });
            }

            // Kur Getir butonuna tıklanınca
            $(document).on('click', '#btnGetirKur', function() {
                getUZSRate();
            });
            
            // Döviz kuru değiştiğinde toplamları güncelle
            $('#DovizKuru').on('change', function() {
                calculateFaturaTotals();
            });

            // Resmi Fatura mı? checkbox değişiminde
            $("#resmiMiCheck").change(function() {
                var isResmi = $(this).is(":checked");
                
                if(isResmi) {
                    $("#sozlesmeDiv").show();
                    
                    // Tüm satırlarda KDV oranlarını güncelle
                    $(".kalem-row").each(function() {
                        // Eğer KDV oranı sıfır ise ve fatura resmi ise KDV'yi 12 yap
                        var kdvOrani = parseFloat($(this).find(".kdv-orani").val());
                        if (kdvOrani === 0) {
                            $(this).find(".kdv-orani").val(12);
                        }
                        // Her satır için hesaplamayı güncelle
                        calculateRowTotals($(this));
                    });
                } else {
                    $("#sozlesmeDiv").hide();
                    $("#SozlesmeID").val('').trigger('change');
                    
                    // Tüm satırlarda KDV oranlarını 0 yap
                    $(".kalem-row").each(function() {
                        $(this).find(".kdv-orani").val(0);
                        // Her satır için hesaplamayı güncelle
                        calculateRowTotals($(this));
                    });
                }
                
                // Tüm fatura toplamlarını güncelle
                calculateFaturaTotals();
            });
            
            // Sayfa açılışında Resmi Fatura durumunu kontrol et
            if($("#resmiMiCheck").is(":checked")) {
                $("#sozlesmeDiv").show();
            } else {
                // Sayfa ilk açıldığında eğer resmi değilse KDV oranlarını 0 yap
                $(".kalem-row").each(function() {
                    $(this).find(".kdv-orani").val(0);
                    // Her satır için hesaplamayı güncelle
                    calculateRowTotals($(this));
                });
            }

            // Kalem Ekle
            $("#btnAddKalem").click(function () {
                addKalemRow();
            });

            // İlk kalem satırını ekle
            addKalemRow();

            // Kalem satırı ekleme fonksiyonu
            function addKalemRow() {
                try {
                    console.log("Kalem satırı ekleniyor...");
                    
                    var template = $("#kalemTemplate").html();
                    template = template.replace(/{index}/g, kalemIndex);
                    $("#kalemlerBody").append(template);
                    
                    // Yeni eklenen satırın olaylarını bağla
                    var $row = $(".kalem-row").last();
                    
                    // Önce olayları bağla
                    bindEventsToRow($row);

                    // Select2'yi başlat (yeni ürün seçicisinin düzgün çalışması için)
                    var $urunSelect = $row.find('.urun-select');
                    var $birimSelect = $row.find('.birim');
                    
                    try {
                        $urunSelect.select2({
                            dropdownParent: $('#faturaForm'),
                            width: '100%',
                            placeholder: 'Ürün Seçiniz'
                        }).on('select2:open', function() {
                            // Select2 açıldığında zIndex'i yükselt
                            $('.select2-container--open').css('z-index', 9999);
                        });
                        
                        $birimSelect.select2({
                            dropdownParent: $('#faturaForm'),
                            width: '100%',
                            placeholder: 'Birim Seçiniz'
                        });
                        
                        // İlk satırı oluştururken doğrudan ilk ürünü seç
                        if (kalemIndex === 0 && $urunSelect.find("option").length > 1) {
                            var ilkUrunId = $urunSelect.find("option:eq(1)").val();
                            console.log("İlk ürün seçiliyor, id:", ilkUrunId);
                            
                            if (ilkUrunId) {
                                // Değeri ayarla
                                $urunSelect.val(ilkUrunId);
                                
                                // Ürün bilgilerini getir
                                getUrunBilgileri(ilkUrunId, $row);
                                
                                // Select2'nin görselini güncellemek için change event'ini tetikle
                                $urunSelect.trigger('change.select2');
                                
                                // Satır toplamlarını hesapla
                                calculateRowTotals($row);
                            }
                        }
                    } catch (e) {
                        console.error("Select2 veya ürün seçimi hatası:", e);
                    }
                    
                    kalemIndex++;
                    console.log("Kalem satırı eklendi, index:", kalemIndex-1);
                }
                catch (e) {
                    console.error("Kalem satırı eklenirken hata:", e);
                }
            }
            
            // Ürün bilgilerini getirme fonksiyonu
            function getUrunBilgileri(urunID, row) {
                if (urunID) {
                    console.log("Ürün bilgileri alınıyor, UrunID:", urunID);
                    $.ajax({
                        url: "/Fatura/GetUrunBilgileri",
                        type: "GET",
                        data: { id: urunID },
                        dataType: "json",
                        success: function (data) {
                            console.log("Ürün bilgileri alındı:", data);
                            
                            if (data.success) {
                                // UrunAdi değerini set et
                                row.find(".urun-adi").val(data.urunAdi);
                                
                                // Birim dropdown'unu seç
                                var birimId = data.birimId;
                                if (birimId) {
                                    row.find(".birim").val(birimId).trigger('change.select2');
                                } else {
                                    // Birim ID yoksa, birim adı üzerinden seçmeye çalış
                                    var birimSelect = row.find(".birim");
                                    var birimAdi = data.birim;
                                    
                                    birimSelect.find("option").each(function() {
                                        if ($(this).text() === birimAdi) {
                                            birimSelect.val($(this).val()).trigger('change.select2');
                                            return false;
                                        }
                                    });
                                }
                                
                                row.find(".birim-fiyat").val(data.birimFiyat);
                                
                                // Resmi fatura ise KDV'yi set et, değilse 0 olarak bırak
                                if ($("#resmiMiCheck").is(":checked")) {
                                    row.find(".kdv-orani").val(data.kdvOrani > 0 ? data.kdvOrani : 12);
                                } else {
                                    row.find(".kdv-orani").val(0);
                                }
                            } else {
                                console.warn("Ürün bilgileri getirilemedi:", data.message);
                            }
                            
                            // Tutarları hesapla
                            calculateRowTotals(row);
                        },
                        error: function(xhr, status, error) {
                            console.error("Ürün bilgileri alınamadı:", status, error);
                            
                            // Hata durumunda varsayılan değerler
                            row.find(".urun-adi").val("");
                            row.find(".birim-fiyat").val(0);
                            row.find(".kdv-orani").val(0);
                            
                            // Tutarları hesapla
                            calculateRowTotals(row);
                        }
                    });
                } else {
                    console.warn("Ürün ID'si geçersiz, bilgiler alınamıyor");
                }
            }

            // Satıra olayları bağlama
            function bindEventsToRow(row) {
                try {
                    console.log("Satıra olaylar bağlanıyor...");
                    
                    // Ürün seçildiğinde
                    row.find(".urun-select").change(function () {
                        var urunID = $(this).val();
                        var currentRow = $(this).closest("tr");
                        
                        console.log("Ürün seçildi, ID:", urunID);
                        
                        if (urunID) {
                            getUrunBilgileri(urunID, currentRow);
                        } else {
                            currentRow.find(".urun-adi").val("");
                            currentRow.find(".birim").val("Adet");
                            currentRow.find(".birim-fiyat").val(0);
                            currentRow.find(".kdv-orani").val(0);
                            
                            // Tutarları hesapla
                            calculateRowTotals(currentRow);
                        }
                    });

                    // Miktar, birim fiyat, KDV oranı veya indirim oranı değiştiğinde
                    row.find(".miktar, .birim-fiyat, .kdv-orani, .indirim-orani").on('input', function () {
                        console.log("Değer değişti:", $(this).attr('class'), $(this).val());
                        calculateRowTotals($(this).closest("tr"));
                    });

                    // Kalem silme
                    row.find(".btn-remove-kalem").click(function () {
                        if ($("#kalemlerBody tr").length > 1) {
                            $(this).closest("tr").remove();
                            calculateFaturaTotals();
                        } else {
                            alert("En az bir kalem olmalıdır!");
                        }
                    });
                    
                    console.log("Satıra olaylar başarıyla bağlandı");
                } catch (e) {
                    console.error("Satıra olaylar bağlanırken hata:", e);
                }
            }

            // Satır toplamlarını hesaplama
            function calculateRowTotals(row) {
                try {
                    console.log("Satır toplamları hesaplanıyor...");
                    
                    // Değerleri al ve sayıya çevir
                    var miktar = parseFloat(row.find(".miktar").val()) || 0;
                    var birimFiyat = parseFloat(row.find(".birim-fiyat").val()) || 0;
                    var kdvOrani = parseFloat(row.find(".kdv-orani").val()) || 0;
                    var indirimOrani = parseFloat(row.find(".indirim-orani").val()) || 0;
                    
                    console.log("Değerler:", {miktar, birimFiyat, kdvOrani, indirimOrani});
                    
                    // Hesaplamalar
                    var tutar = miktar * birimFiyat;
                    var indirimTutari = tutar * (indirimOrani / 100);
                    var netTutar = tutar - indirimTutari;
                    var kdvTutari = netTutar * (kdvOrani / 100);
                    var toplamTutar = netTutar + kdvTutari;
                    
                    console.log("Hesaplanan değerler:", {tutar, indirimTutari, netTutar, kdvTutari, toplamTutar});
                    
                    // Değerleri forma yaz (formatlı şekilde göster)
                    row.find(".tutar").val(formatDecimal(tutar));
                    row.find(".kdv-tutari").val(kdvTutari.toFixed(2)); // Hidden için ham değer
                    
                    // USD için 100 ile çarpma yapmayı kaldır - NetTutar doğru değerle kaydedilsin
                    row.find(".net-tutar").val(toplamTutar.toFixed(2)); // Hidden için ham değer
                    
                    // Tüm fatura toplamlarını güncelle
                    calculateFaturaTotals();
                    
                    console.log("Satır toplamları güncellendi");
                } catch (e) {
                    console.error("Satır toplamları hesaplanırken hata:", e);
                }
            }

            // Fatura kalemlerini hesaplama
            function calculateFaturaTotals() {
                var seciliParaBirimi = $('#dovizTuruSelect').val();
                var dovizKuru = parseFloat($('#DovizKuru').val()) || 1;
                
                var araToplamAna = 0;
                var kdvToplamAna = 0;
                var indirimToplamAna = 0;
                var genelToplamAna = 0;
                
                // Tüm kalemleri döngüye alıp toplam hesaplamaları yap
                $('#kalemlerBody tr').each(function() {
                    var miktar = parseFloat($(this).find('.miktar').val()) || 0;
                    var birimFiyat = parseFloat($(this).find('.birim-fiyat').val()) || 0;
                    var kdvOrani = parseFloat($(this).find('.kdv-orani').val()) || 0;
                    var indirimOrani = parseFloat($(this).find('.indirim-orani').val()) || 0;
                    
                    // Kalem tutarı = Miktar * Birim Fiyat
                    var tutar = miktar * birimFiyat;
                    
                    // İndirim tutarı hesaplama
                    var indirimTutari = (tutar * indirimOrani) / 100;
                    
                    // İndirim sonrası net tutar
                    var netTutar = tutar - indirimTutari;
                    
                    // KDV tutarı hesaplama
                    var kdvTutari = (netTutar * kdvOrani) / 100;
                    
                    // Toplam tutarları güncelle
                    araToplamAna += tutar;
                    kdvToplamAna += kdvTutari;
                    indirimToplamAna += indirimTutari;
                });
                
                // Genel toplam hesaplaması
                genelToplamAna = araToplamAna - indirimToplamAna + kdvToplamAna;
                
                // Döviz hesaplamaları
                var araToplamDoviz = 0;
                var kdvToplamDoviz = 0;
                var indirimToplamDoviz = 0;
                var genelToplamDoviz = 0;
                
                // Seçilen para birimine göre döviz hesaplama
                if (seciliParaBirimi === 'USD') {
                    // Ana para birimi USD, döviz UZS
                    araToplamDoviz = araToplamAna * dovizKuru;
                    kdvToplamDoviz = kdvToplamAna * dovizKuru;
                    indirimToplamDoviz = indirimToplamAna * dovizKuru;
                    genelToplamDoviz = genelToplamAna * dovizKuru;
                } else {
                    // Ana para birimi UZS, döviz USD
                    araToplamDoviz = araToplamAna / dovizKuru;
                    kdvToplamDoviz = kdvToplamAna / dovizKuru;
                    indirimToplamDoviz = indirimToplamAna / dovizKuru;
                    genelToplamDoviz = genelToplamAna / dovizKuru;
                }
                
                // Form alanlarını güncelle - Formatlı string olarak
                // Ana para birimi değerleri
                $('#AraToplam').val(formatDecimal(araToplamAna));
                $('#KdvTutari').val(formatDecimal(kdvToplamAna));
                $('#toplamIndirimTutari').val(formatDecimal(indirimToplamAna));
                $('#GenelToplam').val(formatDecimal(genelToplamAna));
                
                // Döviz karşılıkları
                $('#AraToplamDoviz').val(formatDecimal(araToplamDoviz));
                $('#KdvTutariDoviz').val(formatDecimal(kdvToplamDoviz));
                $('#toplamIndirimTutariDoviz').val(formatDecimal(indirimToplamDoviz));
                $('#GenelToplamDoviz').val(formatDecimal(genelToplamDoviz));
                
                // Hidden field'lar için de güncelleme yap
                $('#hiddenAraToplam').val(araToplamAna.toFixed(2));
                $('#hiddenKdvToplam').val(kdvToplamAna.toFixed(2));
                $('#hiddenGenelToplam').val(genelToplamAna.toFixed(2));
                $('#hiddenAraToplamDoviz').val(araToplamDoviz.toFixed(2));
                $('#hiddenKdvToplamDoviz').val(kdvToplamDoviz.toFixed(2));
                $('#hiddenGenelToplamDoviz').val(genelToplamDoviz.toFixed(2));
                
                console.log("Fatura toplamları güncellendi. Para Birimi: " + seciliParaBirimi + ", Kur: " + dovizKuru);
            }
            
            // Para birimi noktalamasını doğru şekilde yapan formatlayıcı
            function formatDecimal(value) {
                // Düzgün formatta görünmesi için değeri 100'e bölmeden tam değerini kullan
                return value.toLocaleString('tr-TR', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });
            }

            // Form gönderilmeden önce kontrol
            $("#faturaForm").submit(function (e) {
                if ($("#kalemlerBody tr").length === 0) {
                    e.preventDefault();
                    alert("En az bir fatura kalemi eklemelisiniz!");
                    return false;
                }
                
                // Boş satırları kaldıralım (performans için)
                var validRows = $(".kalem-row").filter(function() {
                    var urunID = $(this).find(".urun-select").val();
                    var miktar = parseFloat($(this).find(".miktar").val()) || 0;
                    return urunID && miktar > 0; // Ürün seçili ve miktar > 0 olan satırlar geçerli
                });
                $(".kalem-row").not(validRows).remove();
                
                // UrunAdi değerlerini kontrol et ve doldur
                var isValid = true;
                $(".kalem-row").each(function(index) {
                    var row = $(this);
                    var urunSelect = row.find(".urun-select");
                    var urunAdiInput = row.find(".urun-adi");
                    
                    // Eğer UrunAdi değeri boşsa, seçili ürünün adını al
                    if (!urunAdiInput.val() && urunSelect.val()) {
                        var selectedOption = urunSelect.find("option:selected");
                        var urunAdi = selectedOption.text();
                        urunAdiInput.val(urunAdi);
                        console.log("UrunAdi değeri dolduruldu:", urunAdi);
                    }
                    
                    // Eğer UrunAdi hala boşsa form gönderimini engelle
                    if (!urunAdiInput.val() && urunSelect.val()) {
                        isValid = false;
                        alert("Ürün adı bilgisi alınamadı. Lütfen sayfayı yenileyip tekrar deneyin.");
                    }
                    
                    // Index değerini güncelle
                    row.find("select, input").each(function() {
                        var name = $(this).attr("name");
                        if (name && name.includes("[") && name.includes("]")) {
                            var newName = name.replace(/\[\d+\]/, "[" + index + "]");
                            $(this).attr("name", newName);
                        }
                    });
                    
                    // Index değerini hidden input ile güncelle
                    row.find("input[name='FaturaKalemleri.Index']").val(index);
                    
                    // Hesaplamaları son kez yap
                    calculateRowTotals(row);
                });
                
                if (!isValid) {
                    e.preventDefault();
                    return false;
                }
                
                // Fatura toplamlarını son kez hesapla
                calculateFaturaTotals();
                
                // Döviz değerleri ve parabirimi değerlerini hidden alanlara aktar
                var dovizKuru = parseFloat($("#DovizKuru").val()) || 13000;
                var parabirimi = $("#dovizTuruSelect").val();
                
                // Önce mevcut hidden alanları temizle
                $('input[name="AraToplamDoviz"], input[name="KDVToplamDoviz"], input[name="GenelToplamDoviz"]').remove();
                
                // Döviz karşılığı değerleri hidden alanlara aktar
                $('<input>').attr({
                    type: 'hidden',
                    name: 'AraToplamDoviz',
                    value: parseFloat($("#AraToplamDoviz").val().replace(/\./g, '').replace(',', '.'))
                }).appendTo('#faturaForm');
                
                $('<input>').attr({
                    type: 'hidden',
                    name: 'KDVToplamDoviz',
                    value: parseFloat($("#KdvTutariDoviz").val().replace(/\./g, '').replace(',', '.'))
                }).appendTo('#faturaForm');
                
                $('<input>').attr({
                    type: 'hidden',
                    name: 'GenelToplamDoviz',
                    value: parseFloat($("#GenelToplamDoviz").val().replace(/\./g, '').replace(',', '.'))
                }).appendTo('#faturaForm');
                
                // Ana toplam değerlerini hidden alanlara aktar
                $('<input>').attr({
                    type: 'hidden',
                    name: 'AraToplam',
                    value: parseFloat($("#AraToplam").val().replace(/\./g, '').replace(',', '.'))
                }).appendTo('#faturaForm');
                
                $('<input>').attr({
                    type: 'hidden',
                    name: 'KDVToplam',
                    value: parseFloat($("#KdvTutari").val().replace(/\./g, '').replace(',', '.'))
                }).appendTo('#faturaForm');
                
                $('<input>').attr({
                    type: 'hidden',
                    name: 'GenelToplam',
                    value: parseFloat($("#GenelToplam").val().replace(/\./g, '').replace(',', '.'))
                }).appendTo('#faturaForm');
                
                // Form submit işlemi için "Kaydediliyor..." mesajını göster
                $("#submitBtn").prop("disabled", true).html('<i class="fas fa-spinner fa-spin"></i> Kaydediliyor...');
                console.log("Form gönderiliyor...");
                
                // 3 dakika (180 saniye) sonra işlem tamamlanmadıysa kullanıcıya bilgi ver (süre uzatıldı)
                setTimeout(function() {
                    if ($("#submitBtn").prop("disabled")) {
                        console.log("İşlem uzun sürüyor, kullanıcıya bilgi veriliyor...");
                        
                        // SweetAlert ile daha detaylı bilgilendirme mesajı göster
                        Swal.fire({
                            title: 'İşlem Devam Ediyor',
                            html: 'Fatura kaydediliyor, ancak işlem normalden uzun sürüyor. Bu, büyük faturaların kaydedilmesi sırasında olağan bir durumdur.<br><br>' +
                                  'Seçenekleriniz:<br>' +
                                  '1. <b>Bekleyin</b>: İşlem tamamlanana kadar bekleyin (2-3 dakika sürebilir).<br>' +
                                  '2. <b>Listeleye Dön</b>: İşlem arka planda devam edecektir. Tamamlandığında fatura listesinde görünecektir.',
                            icon: 'info',
                            showCancelButton: true,
                            confirmButtonText: 'Bekle',
                            cancelButtonText: 'Listeye Dön',
                            allowOutsideClick: false
                        }).then((result) => {
                            if (!result.isConfirmed) {
                                window.location.href = "/Fatura/Index";
                            }
                        });
                    }
                }, 180000);
                
                // Normal form gönderimi için true döndür
                return true;
            });
        });
    </script>
}
